{"version":3,"file":"static/js/777.b3eb7fa6.chunk.js","mappings":"4HAAA,MAMA,EAN8BA,GAC5BA,EACGC,QAAQ,WAAY,OACpBA,QAAQ,MAAOD,GAAQA,EAAIE,gBAC3BC,M,6JCSL,MAAMC,EAAYA,KAChB,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAChBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAcC,aAAaC,QAAQ,eAEnCC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,SAAUF,EAAAA,KAAaG,SAAS,wBAChCC,SAAUJ,EAAAA,KAAaG,SAAS,0BAyBlC,OANAE,EAAAA,WAAgB,KACVT,GACFF,EAAS,IACX,GACC,CAACE,EAAaF,KAGfY,EAAAA,EAAAA,MAAA,OAAK,uBAAqB,QAAQC,UAAU,sEAAqEC,SAAA,EAC/GC,EAAAA,EAAAA,KAAA,OAAKC,IAAI,oCAAoCC,IAAI,UACjDF,EAAAA,EAAAA,KAAA,MAAIF,UAAU,qCAAoCC,SAAC,6BACnDC,EAAAA,EAAAA,KAACG,EAAAA,GAAM,CACLC,cAjCgB,CAAEX,SAAU,aAAcE,SAAU,WAkCpDL,iBAAkBA,EAClBe,SA7BcC,IAAqE,IAApE,SAAEb,EAAQ,SAAEE,GAAkDW,EACjFC,EAAAA,EACGC,KAAoB,aAAc,CAAEf,WAAUE,aAC9Cc,MAAMC,IACLtB,aAAauB,QAAQ,cAAeD,EAAIE,KAAKC,OAC7C9B,EAAU,CACR+B,QAAS,UACTC,QAAQ,WAADC,OAAaN,EAAIE,KAAKK,UAAS,KAAAD,OAAIN,EAAIE,KAAKM,SAAQ,OAE7DjC,EAAS,IAAI,IAEdkC,OAAOC,IAA4C,IAADC,EACjDC,EAAAA,EAASC,MAAMC,SAASC,EAAAA,EAAYC,QAAQC,IAAI,CAAEZ,QAAuB,QAAhBM,EAAED,EAAMQ,gBAAQ,IAAAP,OAAA,EAAdA,EAAgBT,KAAKG,QAASD,QAAS,WAAY,GAC9G,EAiBAe,oBAAkB,EAAA9B,UAElBF,EAAAA,EAAAA,MAACiC,EAAAA,GAAI,CAAChC,UAAU,mEAAkEC,SAAA,EAChFC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAyB,CAACC,UAAU,WAAWtC,UAAQ,KACxDM,EAAAA,EAAAA,KAAC+B,EAAAA,EAAyB,CAACC,UAAU,WAAWC,KAAK,WAAWvC,UAAQ,KACxEM,EAAAA,EAAAA,KAACkC,EAAAA,EAAe,CAACC,KAAK,QAAQF,KAAK,kBAGnC,EAIV,EAAerC,EAAAA,KAAWd,E,6ECxD1B,MAAMsD,EAAc9B,IAAmE,IAAlE,UAAE0B,EAAS,KAAEC,EAAO,UAAWI,GAA6B/B,EAC/E,MAAMgC,GAASC,EAAAA,EAAAA,OACRC,EAAUC,GAAe7C,EAAAA,SAAe0C,EAAOI,OAAOV,IAK7D,OAHApC,EAAAA,WAAgB,KACd6C,EAAYH,EAAOI,OAAOV,GAAW,GACpC,CAACM,EAAQN,KAEVnC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,MAAA,SAAO8C,QAASX,EAAWlC,UAAU,gBAAeC,SAAA,EACjD6C,EAAAA,EAAAA,GAAqBZ,GAAW,IAAEK,EAAU3C,UAAWM,EAAAA,EAAAA,KAAA,QAAMF,UAAU,eAAcC,SAAC,MAAW,KAAM,QAE1GC,EAAAA,EAAAA,KAAC6C,EAAAA,GAAK,CACJZ,KAAMA,EACNa,GAAId,EACJe,KAAMf,EACNlC,UAAS,gBAAAkB,OAAkBwB,EAAW,eAAiB,oBACnDH,KAENrC,EAAAA,EAAAA,KAACgD,EAAAA,GAAY,CAACC,UAAU,OAAOnD,UAAU,uBAAuBiD,KAAMf,MAClE,EAIV,EAAepC,EAAAA,KAAWwC,E","sources":["helpers/camel-case-to-title-case.helper.ts","pages/Login.page.tsx","shared-components/inputs/FormikInputField.component.tsx"],"sourcesContent":["const camelCaseToTitleCase = (str: string) =>\r\n  str\r\n    .replace(/([A-Z])/g, \" $1\")\r\n    .replace(/^./, (str) => str.toUpperCase())\r\n    .trim();\r\n\r\nexport default camelCaseToTitleCase;\r\n","import React from \"react\";\r\nimport http from \"../http\";\r\nimport LoginResponse from \"../auth/models/login-response.type\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\nimport useToastrStore from \"../store/hooks/use-toastr-store.hook\";\r\nimport { AxiosError } from \"axios\";\r\nimport AppStore from \"../store\";\r\nimport ToastrStore from \"../store/slices/toastr-store.slice\";\r\nimport * as yup from \"yup\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikInputFieldComponent from \"../shared-components/inputs/FormikInputField.component\";\r\n\r\nconst LoginPage = () => {\r\n  const { addToastr } = useToastrStore();\r\n  const navigate = useNavigate();\r\n\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n  const initialValues = { username: \"kminchelle\", password: \"0lelplR\" };\r\n  const validationSchema = yup.object().shape({\r\n    username: yup.string().required(\"Username is required\"),\r\n    password: yup.string().required(\"Password is required\"),\r\n  });\r\n\r\n  const handleLogin = ({ username, password }: { username: string; password: string }) => {\r\n    http\r\n      .post<LoginResponse>(\"auth/login\", { username, password })\r\n      .then((res) => {\r\n        localStorage.setItem(\"accessToken\", res.data.token);\r\n        addToastr({\r\n          variant: \"success\",\r\n          message: `Welcome ${res.data.firstName} ${res.data.lastName}!`,\r\n        });\r\n        navigate(\"/\");\r\n      })\r\n      .catch((error: AxiosError<{ message: string }>) => {\r\n        AppStore.store.dispatch(ToastrStore.actions.add({ message: error.response?.data.message, variant: \"danger\" }));\r\n      });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (accessToken) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [accessToken, navigate]);\r\n\r\n  return (\r\n    <div aria-roledescription=\"login\" className=\"h-full flex flex-col justify-center items-center bg-gray-100 gap-10\">\r\n      <img src=\"https://img.logoipsum.com/262.svg\" alt=\"Logo\" />\r\n      <h1 className=\"text-3xl font-medium text-gray-700\">Sign in to your account</h1>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        validationSchema={validationSchema}\r\n        onSubmit={handleLogin}\r\n        enableReinitialize\r\n      >\r\n        <Form className=\"bg-white p-10 rounded border border-gray-300 flex flex-col gap-5\">\r\n          <FormikInputFieldComponent fieldName=\"username\" required />\r\n          <FormikInputFieldComponent fieldName=\"password\" type=\"password\" required />\r\n          <ButtonComponent text=\"Login\" type=\"submit\" />\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(LoginPage);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\nimport { InputTypes } from \"./BaseInput.component\";\r\n\r\ntype FormikFieldProps = {\r\n  fieldName: any | string;\r\n  type?: InputTypes;\r\n} & React.InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormikField = ({ fieldName, type = \"text\", ...restProps }: FormikFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      <label htmlFor={fieldName} className=\"text-gray-700\">\r\n        {camelCaseToTitleCase(fieldName)} {restProps.required ? <span className=\"text-red-500\">*</span> : null}{\" \"}\r\n      </label>\r\n      <Field\r\n        type={type}\r\n        id={fieldName}\r\n        name={fieldName}\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        {...restProps}\r\n      />\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikField);\r\n"],"names":["str","replace","toUpperCase","trim","LoginPage","addToastr","useToastrStore","navigate","useNavigate","accessToken","localStorage","getItem","validationSchema","yup","shape","username","required","password","React","_jsxs","className","children","_jsx","src","alt","Formik","initialValues","onSubmit","_ref","http","post","then","res","setItem","data","token","variant","message","concat","firstName","lastName","catch","error","_error$response","AppStore","store","dispatch","ToastrStore","actions","add","response","enableReinitialize","Form","FormikInputFieldComponent","fieldName","type","ButtonComponent","text","FormikField","restProps","formik","useFormikContext","hasError","setHasError","errors","htmlFor","camelCaseToTitleCase","Field","id","name","ErrorMessage","component"],"sourceRoot":""}