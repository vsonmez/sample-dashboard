{"version":3,"file":"static/js/777.eeefaf26.chunk.js","mappings":"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","sources":["helpers/get-button-styles.helper.ts","pages/Login.page.tsx","shared-components/buttons/Button.component.tsx","shared-components/inputs/BaseInput.component.tsx"],"sourcesContent":["const getButtonStyles = (\r\n  variant: \"primary\" | \"success\" | \"warning\" | \"danger\",\r\n  baseClass: string,\r\n  isButtonIcon?: boolean,\r\n  isButtonBordered?: boolean\r\n) => {\r\n  const buttonBorderedStyleMap = {\r\n    primary: \"border-indigo-500 hover:border-indigo-700 text-indigo-500 hover:text-indigo-700\",\r\n    success: \"border-green-600 hover:border-green-700 text-green-600 hover:text-green-700\",\r\n    warning: \"border-orange-500 hover:border-orange-700 text-orange-500 hover:text-orange-700\",\r\n    danger: \"border-red-500 hover:border-red-700 text-red-500 hover:text-red-700\",\r\n  };\r\n  const buttonStyleMap = {\r\n    primary: \"bg-indigo-500 hover:bg-indigo-700\",\r\n    success: \"bg-green-600 hover:bg-green-700\",\r\n    warning: \"bg-orange-500 hover:bg-orange-700\",\r\n    danger: \"bg-red-500 hover:bg-red-700\",\r\n  };\r\n  const buttonIconStyleMap = {\r\n    primary: \"ring-indigo-500 hover:ring-indigo-700 text-indigo-500 hover:text-indigo-700 hover:ring-2\",\r\n    success: \"ring-green-600 hover:ring-green-700 text-green-600 hover:text-green-700 hover:ring-2\",\r\n    warning: \"ring-orange-500 hover:ring-orange-700 text-orange-500 hover:text-orange-700 hover:ring-2\",\r\n    danger: \"ring-red-500 hover:ring-red-700 text-red-500 hover:text-red-700 hover:ring-2\",\r\n  };\r\n  if (isButtonBordered) {\r\n    return `${buttonBorderedStyleMap[variant] || buttonBorderedStyleMap.primary} ${baseClass}`;\r\n  }\r\n  if (isButtonIcon) {\r\n    return `${buttonIconStyleMap[variant] || buttonIconStyleMap.primary} ${baseClass}`;\r\n  }\r\n  return `${buttonStyleMap[variant] || buttonStyleMap.primary} ${baseClass}`;\r\n};\r\n\r\nexport default getButtonStyles;\r\n","import React from \"react\";\r\nimport http from \"../http\";\r\nimport LoginResponse from \"../auth/models/login-response.type\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport BaseInputComponent from \"../shared-components/inputs/BaseInput.component\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\n\r\nconst LoginPage = () => {\r\n  const navigate = useNavigate();\r\n  const [username, setUsername] = React.useState(\"kminchelle\");\r\n  const [password, setPassword] = React.useState(\"0lelplR\");\r\n  const accessToken = localStorage.getItem(\"accessToken\");\r\n\r\n  const handleLogin = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    http\r\n      .post<LoginResponse>(\"auth/login\", { username, password })\r\n      .then((res) => {\r\n        localStorage.setItem(\"accessToken\", res.data.token);\r\n        navigate(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (accessToken) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [accessToken, navigate]);\r\n\r\n  return (\r\n    <div aria-roledescription=\"login\" className=\"h-full flex flex-col gap-5 justify-center items-center bg-gray-50\">\r\n      <img src=\"https://img.logoipsum.com/262.svg\" alt=\"Logo\" />\r\n      <h1 className=\"text-3xl font-medium\">Sign in to your account</h1>\r\n      <div className=\"w-full max-w-96 border rounded p-5 shadow-sm bg-white\">\r\n        <form onSubmit={(e) => handleLogin(e)} className=\"flex flex-col gap-5\">\r\n          <BaseInputComponent\r\n            label=\"Username\"\r\n            id=\"username\"\r\n            value={username}\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n          <BaseInputComponent\r\n            label=\"Password\"\r\n            id=\"password\"\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <ButtonComponent text=\"Login\" type=\"submit\" />\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(LoginPage);\r\n","import React from \"react\";\r\nimport getButtonStyles from \"../../helpers/get-button-styles.helper\";\r\nimport ButtonTypes from \"./models/button-types.type\";\r\nimport ButtonVariants from \"./models/button-variants.type\";\r\n\r\ntype ButtonProps = {\r\n  onClick?: () => void;\r\n  text: string;\r\n  type?: ButtonTypes;\r\n  className?: string;\r\n  variant?: ButtonVariants;\r\n  isButtonBordered?: boolean;\r\n};\r\n\r\nconst Button = ({ className, onClick, text, variant = \"primary\", type = \"button\", isButtonBordered }: ButtonProps) => {\r\n  const baseClass = `${isButtonBordered ? \"\" : \"text-white\"} font-bold py-2 px-4 rounded transition-colors`;\r\n  const buttonClass = React.useRef(`${baseClass} ${className || \"\"}`);\r\n\r\n  const [buttonStyles, setButtonStyles] = React.useState(\r\n    getButtonStyles(variant, buttonClass.current, false, isButtonBordered)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setButtonStyles(getButtonStyles(variant, buttonClass.current, false, isButtonBordered));\r\n  }, [variant, buttonClass, isButtonBordered]);\r\n\r\n  return (\r\n    <button className={buttonStyles} type={type} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import React from \"react\";\r\n\r\n// TODO: input tiplerini barındıran bir enum oluşturulacak.\r\nexport type InputTypes =\r\n  | \"text\"\r\n  | \"number\"\r\n  | \"email\"\r\n  | \"password\"\r\n  | \"date\"\r\n  | \"datetime-local\"\r\n  | \"time\"\r\n  | \"month\"\r\n  | \"week\"\r\n  | \"url\"\r\n  | \"search\"\r\n  | \"tel\"\r\n  | \"color\"\r\n  | \"file\"\r\n  | \"range\"\r\n  | \"hidden\"\r\n  | \"checkbox\"\r\n  | \"radio\";\r\n\r\ninterface BaseInputProps {\r\n  type?: InputTypes;\r\n  label?: string;\r\n  id?: string;\r\n  value?: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  placeholder?: string;\r\n  className?: string;\r\n  name?: string;\r\n}\r\n\r\nconst Input: React.FC<BaseInputProps> = ({\r\n  type = \"text\",\r\n  label: inputLabel,\r\n  id: inputId,\r\n  value: inputValue,\r\n  onChange: onInputChange,\r\n  placeholder,\r\n  className,\r\n  name,\r\n}) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-2\" aria-roledescription=\"base-input\">\r\n      {inputLabel && (\r\n        <label className=\"font-medium text-gray-900\" htmlFor={inputId}>\r\n          {inputLabel}\r\n        </label>\r\n      )}\r\n      <input\r\n        className={`outline-none ring-1 ring-gray-300 px-2 py-1 rounded focus:ring-indigo-500 focus:ring-2 transition-colors ${\r\n          className || \"\"\r\n        }`}\r\n        name={name}\r\n        type={type}\r\n        id={inputId}\r\n        value={inputValue}\r\n        onChange={onInputChange}\r\n        placeholder={placeholder}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Input);\r\n"],"names":["getButtonStyles","variant","baseClass","isButtonIcon","isButtonBordered","buttonBorderedStyleMap","primary","success","warning","danger","buttonStyleMap","buttonIconStyleMap","concat","LoginPage","navigate","useNavigate","username","setUsername","React","password","setPassword","accessToken","localStorage","getItem","_jsxs","className","children","_jsx","src","alt","onSubmit","e","preventDefault","http","post","then","res","setItem","data","token","catch","err","console","log","BaseInputComponent","label","id","value","onChange","target","type","ButtonComponent","text","Button","_ref","onClick","buttonClass","buttonStyles","setButtonStyles","current","Input","inputLabel","inputId","inputValue","onInputChange","placeholder","name","htmlFor"],"sourceRoot":""}