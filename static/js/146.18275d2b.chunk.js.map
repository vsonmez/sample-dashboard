{"version":3,"file":"static/js/146.18275d2b.chunk.js","mappings":"2HAAA,MAMA,EAN8BA,GAC5BA,EACGC,QAAQ,WAAY,OACpBA,QAAQ,MAAOD,GAAQA,EAAIE,gBAC3BC,M,4EC8BL,MAAMC,EAAkCC,IASjC,IATkC,KACvCC,EAAO,OACPC,MAAOC,EACPC,GAAIC,EACJC,MAAOC,EACPC,SAAUC,EAAa,YACvBC,EAAW,UACXC,EAAS,KACTC,GACDZ,EACC,OACEa,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAsB,uBAAqB,aAAYG,SAAA,CACnEX,IACCY,EAAAA,EAAAA,KAAA,SAAOJ,UAAU,4BAA4BK,QAASX,EAAQS,SAC3DX,KAGLY,EAAAA,EAAAA,KAAA,SACEJ,UAAS,4GAAAM,OACPN,GAAa,IAEfC,KAAMA,EACNX,KAAMA,EACNG,GAAIC,EACJC,MAAOC,EACPC,SAAUC,EACVC,YAAaA,MAEX,EAIV,EAAeQ,EAAAA,KAAWnB,G,YChE1B,MAAMoB,EAAcC,IAEhBP,EAAAA,EAAAA,MAAA,OACEQ,KAAK,OACLC,OAAO,eACPC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,QAAQ,YACRC,OAAO,MACPC,MAAM,SACFR,EAAKN,SAAA,EAETC,EAAAA,EAAAA,KAAA,QAAMc,EAAE,gEACRd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,yBAKd,EAAeX,EAAAA,KAAWC,GChBpBW,EAAc9B,IAA6F,IAA5F,SAAE+B,EAAQ,YAAErB,GAA0EV,EACzG,MAAOM,EAAO0B,GAAYd,EAAAA,SAAe,IAIzC,OACEL,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oBAAoB,uBAAqB,SAAQG,SAAA,EAC9DC,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,SAAQG,UACrBC,EAAAA,EAAAA,KAACkB,EAAkB,CACjBvB,YAAaA,GAAe,YAC5BT,KAAK,SACLO,SAAW0B,IACTF,EAASE,EAAMC,OAAO7B,MAAM,EAE9BK,UAAU,iCAGdI,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,CAACC,QAfFC,KACrBP,EAASzB,EAAM,EAcgCQ,UAC3CC,EAAAA,EAAAA,KAACwB,EAAmB,CAAC5B,UAAU,gBAE7B,EAIV,EAAeO,EAAAA,KAAWY,G,aC3B1B,MAAMU,EAAYpB,IAEdL,EAAAA,EAAAA,KAAA,OAAKW,QAAQ,gBAAgBL,KAAK,eAAeM,OAAO,MAAMC,MAAM,SAAUR,EAAKN,UACjFC,EAAAA,EAAAA,KAAA,QAAMc,EAAE,uZAKd,EAAeX,EAAAA,KAAWsB,GCRpBC,EAAcrB,IAEhBL,EAAAA,EAAAA,KAAA,OAAKW,QAAQ,YAAYL,KAAK,eAAeM,OAAO,MAAMC,MAAM,SAAUR,EAAKN,UAC7EC,EAAAA,EAAAA,KAAA,QAAMc,EAAE,4FAKd,EAAeX,EAAAA,KAAWuB,GCRpBC,EAActB,IAEhBP,EAAAA,EAAAA,MAAA,OAAKa,QAAQ,YAAYL,KAAK,eAAeM,OAAO,MAAMC,MAAM,SAAUR,EAAKN,SAAA,EAC7EC,EAAAA,EAAAA,KAAA,QAAMc,EAAE,uHACRd,EAAAA,EAAAA,KAAA,QAAMc,EAAE,2CAKd,EAAeX,EAAAA,KAAWwB,GCF1B,EATyBC,CAACC,EAAcC,KACtC,IAAKD,IAASC,EAAS,OAAOD,EAC9B,MAAME,EAAQ,IAAIC,OAAOF,EAAS,MAClC,OAAOD,EAAKhD,QACVkD,GACCE,GAAK,+EAAA/B,OAAkF+B,EAAK,YAC9F,ECEGC,EAAcjD,IAAwC,IAAvC,QAAE6C,GAA+B7C,EACpD,MAAM,YAAEkD,IAAgBC,EAAAA,EAAAA,KACxB,OAAKD,GAAsC,IAAvBA,EAAYE,QAI9BvC,EAAAA,EAAAA,MAAA,SAAOF,UAAU,SAAS,uBAAqB,eAAcG,SAAA,EAC3DC,EAAAA,EAAAA,KAAA,SAAOJ,UAAU,2BAA0BG,UACzCD,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,UAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,iBAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,WAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,cAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,YAC9BC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,gBAAeG,SAAC,cAC9BC,EAAAA,EAAAA,KAAA,eAGJA,EAAAA,EAAAA,KAAA,SAAAD,SACc,OAAXoC,QAAW,IAAXA,OAAW,EAAXA,EAAaG,KAAKC,IACjBzC,EAAAA,EAAAA,MAAA,MAAqBF,UAAU,WAAUG,SAAA,EACvCC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,WAAUG,UACtBC,EAAAA,EAAAA,KAAA,OAAKwC,IAAKD,EAAQE,UAAWC,IAAKH,EAAQI,MAAO/C,UAAU,oBAE7DI,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,MAAMgD,wBAAyB,CAAEC,OAAQjB,EAAiBW,EAAQI,MAAOb,OACvF9B,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,MAAKG,SAAEwC,EAAQO,SAC7B9C,EAAAA,EAAAA,KAAA,MACEJ,UAAU,WACVgD,wBAAyB,CAAEC,OAAQjB,EAAiBW,EAAQQ,YAAajB,OAE3EhC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,MAAKG,SAAA,CAAEwC,EAAQS,MAAM,QACnClD,EAAAA,EAAAA,MAAA,MAAIF,UAAU,MAAKG,SAAA,CAAEwC,EAAQU,mBAAmB,QAChDjD,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,MAAKG,SAAEwC,EAAQW,UAC7BlD,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,MAAKG,SAAEwC,EAAQY,SAC7BnD,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,MAAKG,UACjBD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kDAAiDG,SAAA,EAC9DC,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,CAAC+B,QAAQ,UAASrD,UACpCC,EAAAA,EAAAA,KAACqD,EAAmB,CAACzD,UAAU,eAEjCI,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,CAAC+B,QAAQ,UAASrD,UACpCC,EAAAA,EAAAA,KAACsD,EAAiB,CAAC1D,UAAU,eAE/BI,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,CAAC+B,QAAQ,SAAQrD,UACnCC,EAAAA,EAAAA,KAACuD,EAAmB,CAAC3D,UAAU,qBAvB9B2C,EAAQlD,WAnBhB,IAiDC,EAIZ,EAAec,EAAAA,KAAW+B,G,gDChE1B,MAMA,EAN8BtD,GAC5BA,EACG4E,MAAM,KACNlB,KAAKmB,GAASA,EAAKC,OAAO,GAAG5E,cAAgB2E,EAAKE,MAAM,KACxDC,KAAK,K,aCUV,MAAMC,EAAa5E,IAAoC,IAAnC,SAAE6E,GAA2B7E,EAC/C,MAAM,kBAAE8E,EAAiB,qBAAEC,IAAyB5B,EAAAA,EAAAA,KAC9C6B,EAAa9D,EAAAA,SAAc,IACxB4D,EAAkBzB,KAAK4B,IAAQ,CACpC3E,MAAO2E,EACP/E,MAAOgF,EAAqBD,QAE7B,CAACH,IAEJ5D,EAAAA,WAAgB,KACmB,IAA7B4D,EAAkB1B,QACpB2B,GACF,GAEC,CAACD,IAEJ,MAAMK,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CxB,MAAOuB,EAAAA,KAAaE,SAAS,qBAC7BL,SAAUG,EAAAA,KAAaE,SAAS,wBAChCxB,YAAasB,EAAAA,KAAaE,SAAS,2BACnCtB,mBAAoBoB,EAAAA,KAEjBG,IAAI,EAAG,0DACPC,IAAI,IAAK,yDACTF,SAAS,mCACZvB,MAAOqB,EAAAA,KAAaG,IAAI,EAAG,4CAA4CD,SAAS,qBAChFrB,OAAQmB,EAAAA,KAELG,IAAI,EAAG,6CACPC,IAAI,EAAG,0CACPF,SAAS,sBACZpB,MAAOkB,EAAAA,KAAaG,IAAI,EAAG,4CAA4CD,SAAS,qBAChF5B,MAAO0B,EAAAA,KAAaE,SAAS,uBAGzBG,EAAiC,CACrC5B,MAAO,GACPoB,SAAU,GACVnB,YAAa,GACbE,wBAAoB0B,EACpB3B,WAAO2B,EACPzB,YAAQyB,EACRxB,WAAOwB,EACPhC,MAAO,IAGT,OACE3C,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,2BAA0BG,UACvCC,EAAAA,EAAAA,KAAC4E,EAAAA,GAAM,CAACF,cAAeA,EAAeN,iBAAkBA,EAAkBN,SAAUA,EAAUe,oBAAkB,EAAA9E,UAC9GD,EAAAA,EAAAA,MAACgF,EAAAA,GAAI,CAAClF,UAAU,yBAAwBG,SAAA,EACtCC,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,QAAQT,UAAQ,KACrDvE,EAAAA,EAAAA,KAACiF,EAAAA,EAA0B,CAACD,UAAU,WAAWE,QAASjB,EAAYM,UAAQ,KAC9EvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,cAAcT,UAAQ,KAC3DvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,qBAAqB9F,KAAK,SAASqF,UAAQ,KAChFvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,QAAQ9F,KAAK,SAASqF,UAAQ,KACnEvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,SAAS9F,KAAK,SAASqF,UAAQ,KACpEvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,QAAQ9F,KAAK,SAASqF,UAAQ,KACnEvE,EAAAA,EAAAA,KAAC+E,EAAAA,EAAyB,CAACC,UAAU,QAAQT,UAAQ,KACrDvE,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,8BAA6BG,UAC1CC,EAAAA,EAAAA,KAACmF,EAAAA,EAAe,CAACjG,KAAK,SAAS2C,KAAK,gBAItC,EAIV,EAAe1B,EAAAA,KAAW0D,G,sBCtE1B,MAAMuB,EAAcA,KAClB,MAAM,UAAEC,IAAcC,EAAAA,EAAAA,KAChBC,EAAYpF,EAAAA,OAAgC,OAC5C,UAAEqF,IAAcC,EAAAA,EAAAA,MACfC,EAAeC,GAAoBxF,EAAAA,SAAuB,KAC3D,kBAAEyF,EAAiB,kBAAEC,IAAsBzD,EAAAA,EAAAA,KAE3Cb,EAAiBpB,EAAAA,aACpBZ,IACCoG,EAAiBpG,GACZA,EAOLqG,EAAkBrG,GANhBiG,EAAU,CACRM,QAAQ,GAAD5F,OAAKmF,EAAS,uDACrBjC,QAAS,WAIW,GAE1B,CAACwC,EAAmBJ,EAAWH,IAG3BU,EAAoB5F,EAAAA,aAAkB,KAAO,IAAD6F,EAC/B,QAAjBA,EAAAT,EAAUU,eAAO,IAAAD,GAAjBA,EAAmBE,OAAO,GACzB,CAACX,IAMEY,EAAmBhG,EAAAA,aAAkB,KACzCqF,EAAU,CACRM,QAAQ,GAAD5F,OAAKmF,EAAS,4CACrBjC,QAAS,YAEX2C,GAAmB,GAClB,CAACP,EAAWO,EAAmBV,IAOlC,OALAlF,EAAAA,WAAgB,IACP,IAAM0F,KAEZ,KAGD/F,EAAAA,EAAAA,MAAAsG,EAAAA,SAAA,CAAArG,SAAA,EACED,EAAAA,EAAAA,MAAA,OAAK,uBAAqB,UAAUF,UAAU,SAAQG,SAAA,EACpDC,EAAAA,EAAAA,KAACqG,EAAAA,EAAuB,CAAC1D,MAAM,UAAU2D,SAAS,wCAClDxG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,0BAAyBG,SAAA,EACtCD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BG,SAAA,EACxCC,EAAAA,EAAAA,KAACuG,EAAoB,CAAC5G,YAAY,qBAAqBqB,SAAUO,KACjEvB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmF,EAAAA,EAAe,CAACtD,KAAK,cAAcP,QAzBvBkF,KAAO,IAADC,EACZ,QAAjBA,EAAAlB,EAAUU,eAAO,IAAAQ,GAAjBA,EAAmBC,WAAW,UA2BxB1G,EAAAA,EAAAA,KAAA,OAAKJ,UAAU,oCAAmCG,UAChDC,EAAAA,EAAAA,KAAC2G,EAAoB,CAAC7E,QAAS4D,aAIrC1F,EAAAA,EAAAA,KAAA,UACE,uBAAqB,qBACrB4G,IAAKrB,EACL3F,UAAU,sDAAqDG,UAE/DD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBG,SAAA,EACnCC,EAAAA,EAAAA,KAAC6G,EAAAA,EAAqB,CAAClE,MAAM,cAAcmE,QAASf,KACpD/F,EAAAA,EAAAA,KAAC+G,EAAmB,CAACjD,SAAUqC,WAGlC,EAIP,EAAehG,EAAAA,KAAWiF,E,sDClF1B,MAAM4B,EAAiB/H,IAAgE,IAA/D,MAAE0D,EAAK,SAAE2D,GAAgDrH,EAC/E,OACEa,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAgB,uBAAqB,kBAAiBG,SAAA,EACnEC,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,sBAAqBG,SAAE4C,IACpC2D,IAAYtG,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,uBAAsBG,SAAEuG,MAC/C,EAIV,EAAenG,EAAAA,KAAW6G,E,8DCG1B,MAAMC,EAAShI,IAAwG,IAAvG,UAAEW,EAAS,QAAE0B,EAAO,KAAEO,EAAI,QAAEuB,EAAU,UAAS,KAAElE,EAAO,SAAQ,iBAAEgI,GAA+BjI,EAC/G,MAAMkI,EAAS,GAAAjH,OAAMgH,EAAmB,GAAK,aAAY,kDACnDE,EAAcjH,EAAAA,OAAa,GAADD,OAAIiH,EAAS,KAAAjH,OAAIN,GAAa,MAEvDyH,EAAcC,GAAmBnH,EAAAA,UACtCoH,EAAAA,EAAAA,GAAgBnE,EAASgE,EAAYnB,SAAS,EAAOiB,IAOvD,OAJA/G,EAAAA,WAAgB,KACdmH,GAAgBC,EAAAA,EAAAA,GAAgBnE,EAASgE,EAAYnB,SAAS,EAAOiB,GAAkB,GACtF,CAAC9D,EAASgE,EAAaF,KAGxBlH,EAAAA,EAAAA,KAAA,UAAQJ,UAAWyH,EAAcnI,KAAMA,EAAMoC,QAASA,EAAQvB,SAC3D8B,GACM,EAIb,EAAe1B,EAAAA,KAAW8G,E,uECxB1B,MAAMO,EAAevI,IAA4C,IAA3C,QAAE6H,EAAO,MAAEnE,GAA0B1D,EACzD,OACEa,EAAAA,EAAAA,MAAA,UAAQF,UAAU,iDAAgDG,SAAA,EAChEC,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,wBAAuBG,SAAE4C,KACzC3C,EAAAA,EAAAA,KAACqB,EAAAA,EAAmB,CAAC+B,QAAQ,SAAS9B,QAASwF,EAAQ/G,UACrDC,EAAAA,EAAAA,KAACyH,EAAAA,EAAkB,CAAC7H,UAAU,gBAEzB,EAIb,EAAeO,EAAAA,KAAWqH,E,wECV1B,MAAME,EAAczI,IAAmE,IAAlE,UAAE+F,EAAS,KAAE9F,EAAO,UAAWyI,GAA6B1I,EAC/E,MAAM2I,GAASC,EAAAA,EAAAA,OACRC,EAAUC,GAAe5H,EAAAA,SAAeyH,EAAOI,OAAOhD,IAK7D,OAHA7E,EAAAA,WAAgB,KACd4H,EAAYH,EAAOI,OAAOhD,GAAW,GACpC,CAAC4C,EAAQ5C,KAEVlF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBG,SAAA,EAClCD,EAAAA,EAAAA,MAAA,SAAOG,QAAS+E,EAAUjF,SAAA,EACvBkI,EAAAA,EAAAA,GAAqBjD,GAAW,IAAE2C,EAAUpD,UAAWvE,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,eAAcG,SAAC,MAAW,KAAM,QAE1GC,EAAAA,EAAAA,KAACkI,EAAAA,GAAK,CACJhJ,KAAMA,EACNG,GAAI2F,EACJnF,KAAMmF,EACNpF,UAAS,gBAAAM,OAAkB4H,EAAW,eAAiB,oBACnDH,KAEN3H,EAAAA,EAAAA,KAACmI,EAAAA,GAAY,CAACC,UAAU,OAAOxI,UAAU,uBAAuBC,KAAMmF,MAClE,EAIV,EAAe7E,EAAAA,KAAWuH,E,wECzB1B,MAAMW,EAAoBpJ,IAAmE,IAAlE,UAAE+F,EAAS,QAAEE,KAAYyC,GAAmC1I,EACrF,MAAM2I,GAASC,EAAAA,EAAAA,OACRC,EAAUC,GAAe5H,EAAAA,SAAeyH,EAAOI,OAAOhD,IAM7D,OAJA7E,EAAAA,WAAgB,KACd4H,EAAYH,EAAOI,OAAOhD,GAAW,GACpC,CAAC4C,EAAQ5C,KAGVlF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBG,SAAA,EAClCD,EAAAA,EAAAA,MAAA,SAAOG,QAAS+E,EAAUjF,SAAA,EACvBkI,EAAAA,EAAAA,GAAqBjD,GACrB2C,EAAUpD,UAAWvE,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,eAAcG,SAAC,MAAW,KAAM,QAExED,EAAAA,EAAAA,MAACoI,EAAAA,GAAK,CACJtI,UAAS,gBAAAM,OAAkB4H,EAAW,eAAiB,iBACvDQ,GAAG,SACHzI,KAAMmF,EACN3F,GAAI2F,KACA2C,EAAS5H,SAAA,EAEbC,EAAAA,EAAAA,KAAA,UAAQT,MAAM,GAAEQ,SAAC,qBAChBmF,EAAQ5C,KAAIiG,IAAA,IAAC,MAAEhJ,EAAK,MAAEJ,GAAOoJ,EAAA,OAC5BvI,EAAAA,EAAAA,KAAA,UAAoBT,MAAOA,EAAMQ,SAC9BZ,GADUI,EAEJ,QAGbS,EAAAA,EAAAA,KAACmI,EAAAA,GAAY,CAACC,UAAU,OAAOxI,UAAU,uBAAuBC,KAAMmF,MAClE,EAIV,EAAe7E,EAAAA,KAAWkI,E,uDCvC1B,MAyBA,EAzBwBjG,KACtB,MAAMoG,EAAWC,EAAAA,EAASC,iBAe1B,MAAO,CACLvG,YAfwBsG,EAAAA,EAASE,eAAeC,EAAAA,EAAaC,OAAOC,gBAgBpE/E,kBAf8B0E,EAAAA,EAASE,eAAeC,EAAAA,EAAaC,OAAOE,sBAgB1EnD,kBAfiCF,IACjC8C,EAASI,EAAAA,EAAahD,kBAAkBF,GAAe,EAevDG,kBARgCmD,KAChCR,EAASI,EAAAA,EAAaK,QAAQC,QAAQ,EAQtClF,qBAbmCmF,KACnCX,EAASI,EAAAA,EAAaG,uBAAuB,EAa9C,C,uDCtBH,MAuBA,EAvBqBzD,KACnB,MAAMkD,EAAWC,EAAAA,EAASC,iBAa1B,MAAO,CACLU,KAbiBX,EAAAA,EAASE,eAAeU,EAAAA,EAAUR,OAAOO,MAc1DE,SAbqBb,EAAAA,EAASE,eAAeU,EAAAA,EAAUR,OAAOS,UAc9DjE,UAbsBoD,EAAAA,EAASE,eAAeU,EAAAA,EAAUR,OAAOU,WAc/DC,QAZsBC,KACtBjB,EAASa,EAAAA,EAAUK,YAAY,EAY/BC,eAT6BC,KAC7BpB,EAASa,EAAAA,EAAUJ,QAAQC,QAAQ,EASpC,C","sources":["helpers/camel-case-to-title-case.helper.ts","shared-components/inputs/BaseInput.component.tsx","shared-components/icons/IconSearch.component.tsx","shared-components/inputs/SearchInput.component.tsx","shared-components/icons/IconEdit.component.tsx","shared-components/icons/IconDelete.component.tsx","shared-components/icons/IconDetail.component.tsx","helpers/highlight-keyword.helper.ts","products/components/ProductList.component.tsx","helpers/kebab-case-to-title-case.hepler.ts","products/components/AddProduct.component.tsx","pages/Product.page.tsx","shared-components/SectionHeading.component.tsx","shared-components/buttons/Button.component.tsx","shared-components/dialog/DialogHeader.component.tsx","shared-components/inputs/FormikInputField.component.tsx","shared-components/inputs/FormikSelectField.component.tsx","store/hooks/use-product-store.hook.ts","store/hooks/use-user-store.hook.ts"],"sourcesContent":["const camelCaseToTitleCase = (str: string) =>\r\n  str\r\n    .replace(/([A-Z])/g, \" $1\")\r\n    .replace(/^./, (str) => str.toUpperCase())\r\n    .trim();\r\n\r\nexport default camelCaseToTitleCase;\r\n","import React from \"react\";\r\n\r\n// TODO: input tiplerini barındıran bir enum oluşturulacak.\r\nexport type InputTypes =\r\n  | \"text\"\r\n  | \"number\"\r\n  | \"email\"\r\n  | \"password\"\r\n  | \"date\"\r\n  | \"datetime-local\"\r\n  | \"time\"\r\n  | \"month\"\r\n  | \"week\"\r\n  | \"url\"\r\n  | \"search\"\r\n  | \"tel\"\r\n  | \"color\"\r\n  | \"file\"\r\n  | \"range\"\r\n  | \"hidden\"\r\n  | \"checkbox\"\r\n  | \"radio\";\r\n\r\ninterface BaseInputProps {\r\n  type?: InputTypes;\r\n  label?: string;\r\n  id?: string;\r\n  value?: string;\r\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\r\n  placeholder?: string;\r\n  className?: string;\r\n  name?: string;\r\n}\r\n\r\nconst Input: React.FC<BaseInputProps> = ({\r\n  type = \"text\",\r\n  label: inputLabel,\r\n  id: inputId,\r\n  value: inputValue,\r\n  onChange: onInputChange,\r\n  placeholder,\r\n  className,\r\n  name,\r\n}) => {\r\n  return (\r\n    <div className=\"flex flex-col gap-2\" aria-roledescription=\"base-input\">\r\n      {inputLabel && (\r\n        <label className=\"font-medium text-gray-900\" htmlFor={inputId}>\r\n          {inputLabel}\r\n        </label>\r\n      )}\r\n      <input\r\n        className={`outline-none ring-1 ring-gray-300 px-2 py-1 rounded focus:ring-indigo-500 focus:ring-2 transition-colors ${\r\n          className || \"\"\r\n        }`}\r\n        name={name}\r\n        type={type}\r\n        id={inputId}\r\n        value={inputValue}\r\n        onChange={onInputChange}\r\n        placeholder={placeholder}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Input);\r\n","import React from \"react\";\r\n\r\nconst IconSearch = (props: React.SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg\r\n      fill=\"none\"\r\n      stroke=\"currentColor\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={2}\r\n      viewBox=\"0 0 24 24\"\r\n      height=\"1em\"\r\n      width=\"1em\"\r\n      {...props}\r\n    >\r\n      <path d=\"M19 11 A8 8 0 0 1 11 19 A8 8 0 0 1 3 11 A8 8 0 0 1 19 11 z\" />\r\n      <path d=\"M21 21l-4.35-4.35\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconSearch);\r\n","import React from \"react\";\r\nimport BaseInputComponent from \"./BaseInput.component\";\r\nimport ButtonIconComponent from \"../buttons/ButtonIcon.component\";\r\nimport IconSearchComponent from \"../icons/IconSearch.component\";\r\n\r\nconst SearchInput = ({ onSearch, placeholder }: { placeholder?: string; onSearch: (value: string) => void }) => {\r\n  const [value, setValue] = React.useState(\"\");\r\n  const handleOnSearch = () => {\r\n    onSearch(value);\r\n  };\r\n  return (\r\n    <div className=\"flex items-center\" aria-roledescription=\"search\">\r\n      <div className=\"flex-1\">\r\n        <BaseInputComponent\r\n          placeholder={placeholder || \"Search...\"}\r\n          type=\"search\"\r\n          onChange={(event) => {\r\n            setValue(event.target.value);\r\n          }}\r\n          className=\"border-r-0 rounded-e-none\"\r\n        />\r\n      </div>\r\n      <ButtonIconComponent onClick={handleOnSearch}>\r\n        <IconSearchComponent className=\"w-5 h-5\" />\r\n      </ButtonIconComponent>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SearchInput);\r\n","import React from \"react\";\r\n\r\nconst IconEdit = (props: React.SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg viewBox=\"0 0 1024 1024\" fill=\"currentColor\" height=\"1em\" width=\"1em\" {...props}>\r\n      <path d=\"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconEdit);\r\n","import React from \"react\";\r\n\r\nconst IconDelete = (props: React.SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" height=\"1em\" width=\"1em\" {...props}>\r\n      <path d=\"M6 19a2 2 0 002 2h8a2 2 0 002-2V7H6v12M8 9h8v10H8V9m7.5-5l-1-1h-5l-1 1H5v2h14V4h-3.5z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconDelete);\r\n","import React from \"react\";\r\n\r\nconst IconDetail = (props: React.SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" height=\"1em\" width=\"1em\" {...props}>\r\n      <path d=\"M20 3H4c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h16c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2zM4 19V5h16l.002 14H4z\" />\r\n      <path d=\"M6 7h12v2H6zm0 4h12v2H6zm0 4h6v2H6z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconDetail);\r\n","const highlightKeyword = (text: string, keyword: string) => {\r\n  if (!text || !keyword) return text;\r\n  const regex = new RegExp(keyword, \"gi\");\r\n  return text.replace(\r\n    regex,\r\n    (match) => `<span class=\"underline font-semibold text-indigo-500\" title='Search Term'>${match}</span>`\r\n  );\r\n};\r\n\r\nexport default highlightKeyword;\r\n","import React from \"react\";\r\nimport useProductStore from \"../../store/hooks/use-product-store.hook\";\r\nimport ButtonIconComponent from \"../../shared-components/buttons/ButtonIcon.component\";\r\nimport IconEditComponent from \"../../shared-components/icons/IconEdit.component\";\r\nimport IconDeleteComponent from \"../../shared-components/icons/IconDelete.component\";\r\nimport IconDetailComponent from \"../../shared-components/icons/IconDetail.component\";\r\nimport highlightKeyword from \"../../helpers/highlight-keyword.helper\";\r\n\r\nconst ProductList = ({ keyword }: { keyword?: string }) => {\r\n  const { productList } = useProductStore();\r\n  if (!productList || productList.length === 0) {\r\n    return null;\r\n  }\r\n  return (\r\n    <table className=\"w-full\" aria-roledescription=\"product list\">\r\n      <thead className=\"border-b-2 font-semibold\">\r\n        <tr>\r\n          <th className=\"text-left p-2\">Image</th>\r\n          <th className=\"text-left p-2\">Name</th>\r\n          <th className=\"text-left p-2\">Brand</th>\r\n          <th className=\"text-left p-2\">Description</th>\r\n          <th className=\"text-left p-2\">Price</th>\r\n          <th className=\"text-left p-2\">Discount</th>\r\n          <th className=\"text-left p-2\">Rating</th>\r\n          <th className=\"text-left p-2\">Quantity</th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {productList?.map((product) => (\r\n          <tr key={product.id} className=\"border-b\">\r\n            <td className=\"p-2 w-24\">\r\n              <img src={product.thumbnail} alt={product.title} className=\"w-24 rounded\" />\r\n            </td>\r\n            <td className=\"p-2\" dangerouslySetInnerHTML={{ __html: highlightKeyword(product.title, keyword) }}></td>\r\n            <td className=\"p-2\">{product.brand}</td>\r\n            <td\r\n              className=\"p-2 w-56\"\r\n              dangerouslySetInnerHTML={{ __html: highlightKeyword(product.description, keyword) }}\r\n            ></td>\r\n            <td className=\"p-2\">{product.price}$</td>\r\n            <td className=\"p-2\">{product.discountPercentage}%</td>\r\n            <td className=\"p-2\">{product.rating}</td>\r\n            <td className=\"p-2\">{product.stock}</td>\r\n            <td className=\"p-2\">\r\n              <div className=\"flex gap-2 flex-nowrap justify-end items-center\">\r\n                <ButtonIconComponent variant=\"primary\">\r\n                  <IconDetailComponent className=\"w-5 h-5\" />\r\n                </ButtonIconComponent>\r\n                <ButtonIconComponent variant=\"warning\">\r\n                  <IconEditComponent className=\"w-5 h-5\" />\r\n                </ButtonIconComponent>\r\n                <ButtonIconComponent variant=\"danger\">\r\n                  <IconDeleteComponent className=\"w-5 h-5\" />\r\n                </ButtonIconComponent>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProductList);\r\n","const kababCaseToTitleCase = (str: string) =>\r\n  str\r\n    .split(\"-\")\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\" \");\r\n\r\nexport default kababCaseToTitleCase;\r\n","import { Form, Formik } from \"formik\";\r\nimport React from \"react\";\r\nimport FormikInputFieldComponent from \"../../shared-components/inputs/FormikInputField.component\";\r\nimport FormikSelectFieldComponent from \"../../shared-components/inputs/FormikSelectField.component\";\r\nimport { ProductFormType } from \"../models/product.type\";\r\nimport ButtonComponent from \"../../shared-components/buttons/Button.component\";\r\nimport useProductStore from \"../../store/hooks/use-product-store.hook\";\r\nimport kababCaseToTitleCase from \"../../helpers/kebab-case-to-title-case.hepler\";\r\nimport * as yup from \"yup\";\r\n\r\ntype AddProductProps = {\r\n  onSubmit: (values: ProductFormType) => void;\r\n};\r\n\r\nconst AddProduct = ({ onSubmit }: AddProductProps) => {\r\n  const { productCategories, setProductCategories } = useProductStore();\r\n  const categories = React.useMemo(() => {\r\n    return productCategories.map((category) => ({\r\n      value: category,\r\n      label: kababCaseToTitleCase(category),\r\n    }));\r\n  }, [productCategories]);\r\n\r\n  React.useEffect(() => {\r\n    if (productCategories.length === 0) {\r\n      setProductCategories();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [productCategories]);\r\n\r\n  const validationSchema = yup.object().shape({\r\n    brand: yup.string().required(\"Brand is required\"),\r\n    category: yup.string().required(\"Category is required\"),\r\n    description: yup.string().required(\"Description is required\"),\r\n    discountPercentage: yup\r\n      .number()\r\n      .min(0, \"Discount percentage must be greater than or equal to 0\")\r\n      .max(100, \"Discount percentage must be less than or equal to 100\")\r\n      .required(\"Discount percentage is required\"),\r\n    price: yup.number().min(0, \"Price must be greater than or equal to 0\").required(\"Price is required\"),\r\n    rating: yup\r\n      .number()\r\n      .min(0, \"Rating must be greater than or equal to 0\")\r\n      .max(5, \"Rating must be less than or equal to 5\")\r\n      .required(\"Rating is required\"),\r\n    stock: yup.number().min(0, \"Stock must be greater than or equal to 0\").required(\"Stock is required\"),\r\n    title: yup.string().required(\"Title is required\"),\r\n  });\r\n\r\n  const initialValues: ProductFormType = {\r\n    brand: \"\",\r\n    category: \"\",\r\n    description: \"\",\r\n    discountPercentage: undefined,\r\n    price: undefined,\r\n    rating: undefined,\r\n    stock: undefined,\r\n    title: \"\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-5 h-full overflow-auto\">\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} enableReinitialize>\r\n        <Form className=\"grid grid-cols-2 gap-5\">\r\n          <FormikInputFieldComponent fieldName=\"brand\" required />\r\n          <FormikSelectFieldComponent fieldName=\"category\" options={categories} required />\r\n          <FormikInputFieldComponent fieldName=\"description\" required />\r\n          <FormikInputFieldComponent fieldName=\"discountPercentage\" type=\"number\" required />\r\n          <FormikInputFieldComponent fieldName=\"price\" type=\"number\" required />\r\n          <FormikInputFieldComponent fieldName=\"rating\" type=\"number\" required />\r\n          <FormikInputFieldComponent fieldName=\"stock\" type=\"number\" required />\r\n          <FormikInputFieldComponent fieldName=\"title\" required />\r\n          <div className=\"col-span-2 flex justify-end\">\r\n            <ButtonComponent type=\"submit\" text=\"Add\"></ButtonComponent>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(AddProduct);\r\n","import React from \"react\";\r\nimport SectionHeadingComponent from \"../shared-components/SectionHeading.component\";\r\nimport SearchInputComponent from \"../shared-components/inputs/SearchInput.component\";\r\nimport useProductStore from \"../store/hooks/use-product-store.hook\";\r\nimport ProductListComponent from \"../products/components/ProductList.component\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\nimport useToastrStore from \"../store/hooks/use-toastr-store.hook\";\r\nimport AddProductComponent from \"../products/components/AddProduct.component\";\r\nimport DialogHeaderComponent from \"../shared-components/dialog/DialogHeader.component\";\r\nimport useUserStore from \"../store/hooks/use-user-store.hook\";\r\n\r\nconst ProductPage = () => {\r\n  const { firstName } = useUserStore();\r\n  const dialogRef = React.useRef<HTMLDialogElement>(null);\r\n  const { addToastr } = useToastrStore();\r\n  const [searchKeyword, setSearchKeyword] = React.useState<string>(\"\");\r\n  const { searchProductList, resetProductStore } = useProductStore();\r\n\r\n  const handleOnSearch = React.useCallback(\r\n    (value: string) => {\r\n      setSearchKeyword(value);\r\n      if (!value) {\r\n        addToastr({\r\n          message: `${firstName}, please enter search keyword. For example 'phone'.`,\r\n          variant: \"warning\",\r\n        });\r\n        return;\r\n      }\r\n      searchProductList(value);\r\n    },\r\n    [searchProductList, addToastr, firstName]\r\n  );\r\n\r\n  const handleCloseDialog = React.useCallback(() => {\r\n    dialogRef.current?.close();\r\n  }, [dialogRef]);\r\n\r\n  const handleAddProduct = () => {\r\n    dialogRef.current?.showModal();\r\n  };\r\n\r\n  const handleSubmitForm = React.useCallback(() => {\r\n    addToastr({\r\n      message: `${firstName}, you have successfully added a product.`,\r\n      variant: \"success\",\r\n    });\r\n    handleCloseDialog();\r\n  }, [addToastr, handleCloseDialog, firstName]);\r\n\r\n  React.useEffect(() => {\r\n    return () => resetProductStore();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div aria-roledescription=\"product\" className=\"h-full\">\r\n        <SectionHeadingComponent title=\"Product\" subtitle=\"View, edit, add, or delete product\" />\r\n        <div className=\"p-5 h-[calc(100%-64px)]\">\r\n          <div className=\"flex justify-between pb-5\">\r\n            <SearchInputComponent placeholder=\"Search products...\" onSearch={handleOnSearch} />\r\n            <div>\r\n              <ButtonComponent text=\"Add Product\" onClick={handleAddProduct} />\r\n            </div>\r\n          </div>\r\n          <div className=\"h-[calc(100%-56px)] overflow-auto\">\r\n            <ProductListComponent keyword={searchKeyword} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <dialog\r\n        aria-roledescription=\"add product dialog\"\r\n        ref={dialogRef}\r\n        className=\"rounded w-1/3 shadow-2xl ring-1 ring-gray-300 h-2/4\"\r\n      >\r\n        <div className=\"h-full flex flex-col\">\r\n          <DialogHeaderComponent title=\"Add Product\" onClose={handleCloseDialog} />\r\n          <AddProductComponent onSubmit={handleSubmitForm} />\r\n        </div>\r\n      </dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProductPage);\r\n","import React from \"react\";\r\n\r\nconst SectionHeading = ({ title, subtitle }: { title: string; subtitle?: string }) => {\r\n  return (\r\n    <div className=\"p-2 shadow-md\" aria-roledescription=\"section-heading\">\r\n      <h1 className=\"text-lg font-medium\">{title}</h1>\r\n      {subtitle && <h2 className=\"text-gray-600 italic\">{subtitle}</h2>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SectionHeading);\r\n","import React from \"react\";\r\nimport getButtonStyles from \"../../helpers/get-button-styles.helper\";\r\nimport ButtonTypes from \"./models/button-types.type\";\r\nimport ButtonVariants from \"./models/button-variants.type\";\r\n\r\ntype ButtonProps = {\r\n  onClick?: () => void;\r\n  text: string;\r\n  type?: ButtonTypes;\r\n  className?: string;\r\n  variant?: ButtonVariants;\r\n  isButtonBordered?: boolean;\r\n};\r\n\r\nconst Button = ({ className, onClick, text, variant = \"primary\", type = \"button\", isButtonBordered }: ButtonProps) => {\r\n  const baseClass = `${isButtonBordered ? \"\" : \"text-white\"} font-bold py-2 px-4 rounded transition-colors`;\r\n  const buttonClass = React.useRef(`${baseClass} ${className || \"\"}`);\r\n\r\n  const [buttonStyles, setButtonStyles] = React.useState(\r\n    getButtonStyles(variant, buttonClass.current, false, isButtonBordered)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setButtonStyles(getButtonStyles(variant, buttonClass.current, false, isButtonBordered));\r\n  }, [variant, buttonClass, isButtonBordered]);\r\n\r\n  return (\r\n    <button className={buttonStyles} type={type} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import React from \"react\";\r\nimport ButtonIconComponent from \"../buttons/ButtonIcon.component\";\r\nimport IconCloseComponent from \"../icons/IconClose.component\";\r\n\r\ntype DialogHeaderProps = {\r\n  onClose: () => void;\r\n  title: string;\r\n};\r\n\r\nconst DialogHeader = ({ onClose, title }: DialogHeaderProps) => {\r\n  return (\r\n    <header className=\"flex items-center justify-between p-3 border-b\">\r\n      <span className=\"font-medium text-base\">{title}</span>\r\n      <ButtonIconComponent variant=\"danger\" onClick={onClose}>\r\n        <IconCloseComponent className=\"w-3 h-3\" />\r\n      </ButtonIconComponent>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default React.memo(DialogHeader);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\nimport { InputTypes } from \"./BaseInput.component\";\r\n\r\ntype FormikFieldProps = {\r\n  fieldName: any | string;\r\n  type?: InputTypes;\r\n} & React.InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormikField = ({ fieldName, type = \"text\", ...restProps }: FormikFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <label htmlFor={fieldName}>\r\n        {camelCaseToTitleCase(fieldName)} {restProps.required ? <span className=\"text-red-500\">*</span> : null}{\" \"}\r\n      </label>\r\n      <Field\r\n        type={type}\r\n        id={fieldName}\r\n        name={fieldName}\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        {...restProps}\r\n      />\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikField);\r\n","import { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport React from \"react\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\n\r\ntype FormikSelectFieldProps = {\r\n  fieldName: any | string;\r\n  options: { value: string; label: string }[];\r\n} & React.SelectHTMLAttributes<HTMLSelectElement>;\r\n\r\nconst FormikSelectField = ({ fieldName, options, ...restProps }: FormikSelectFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <label htmlFor={fieldName}>\r\n        {camelCaseToTitleCase(fieldName)}\r\n        {restProps.required ? <span className=\"text-red-500\">*</span> : null}{\" \"}\r\n      </label>\r\n      <Field\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        as=\"select\"\r\n        name={fieldName}\r\n        id={fieldName}\r\n        {...restProps}\r\n      >\r\n        <option value=\"\">Select an option</option>\r\n        {options.map(({ value, label }) => (\r\n          <option key={value} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </Field>\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikSelectField);\r\n","import AppStore from \"..\";\r\nimport ProductStore from \"../slices/product-store.slice\";\r\n\r\nconst useProductStore = () => {\r\n  const dispatch = AppStore.useAppDispatch();\r\n  const selectProductList = AppStore.useAppSelector(ProductStore.select.getProductList);\r\n  const selectProductCategories = AppStore.useAppSelector(ProductStore.select.getProductCategories);\r\n  const dispatchSearchProductList = (searchKeyword: string) => {\r\n    dispatch(ProductStore.searchProductList(searchKeyword));\r\n  };\r\n\r\n  const dispatchSetProductCategories = () => {\r\n    dispatch(ProductStore.getProductCategories());\r\n  };\r\n\r\n  const dispatchResetProductStore = () => {\r\n    dispatch(ProductStore.actions.reset());\r\n  };\r\n\r\n  return {\r\n    productList: selectProductList,\r\n    productCategories: selectProductCategories,\r\n    searchProductList: dispatchSearchProductList,\r\n    resetProductStore: dispatchResetProductStore,\r\n    setProductCategories: dispatchSetProductCategories,\r\n  };\r\n};\r\n\r\nexport default useProductStore;\r\n","import AppStore from \"..\";\r\nimport UserStore from \"../slices/user-store.slice\";\r\n\r\nconst useUserStore = () => {\r\n  const dispatch = AppStore.useAppDispatch();\r\n  const selectUser = AppStore.useAppSelector(UserStore.select.user);\r\n  const selectFullName = AppStore.useAppSelector(UserStore.select.fullName);\r\n  const selectFirstName = AppStore.useAppSelector(UserStore.select.firstname);\r\n\r\n  const dispatchSetUser = () => {\r\n    dispatch(UserStore.fetchUser());\r\n  };\r\n\r\n  const dispatchResetUserStore = () => {\r\n    dispatch(UserStore.actions.reset());\r\n  };\r\n\r\n  return {\r\n    user: selectUser,\r\n    fullName: selectFullName,\r\n    firstName: selectFirstName,\r\n    setUser: dispatchSetUser,\r\n    resetUserStore: dispatchResetUserStore,\r\n  };\r\n};\r\n\r\nexport default useUserStore;\r\n"],"names":["str","replace","toUpperCase","trim","Input","_ref","type","label","inputLabel","id","inputId","value","inputValue","onChange","onInputChange","placeholder","className","name","_jsxs","children","_jsx","htmlFor","concat","React","IconSearch","props","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","viewBox","height","width","d","SearchInput","onSearch","setValue","BaseInputComponent","event","target","ButtonIconComponent","onClick","handleOnSearch","IconSearchComponent","IconEdit","IconDelete","IconDetail","highlightKeyword","text","keyword","regex","RegExp","match","ProductList","productList","useProductStore","length","map","product","src","thumbnail","alt","title","dangerouslySetInnerHTML","__html","brand","description","price","discountPercentage","rating","stock","variant","IconDetailComponent","IconEditComponent","IconDeleteComponent","split","word","charAt","slice","join","AddProduct","onSubmit","productCategories","setProductCategories","categories","category","kababCaseToTitleCase","validationSchema","yup","shape","required","min","max","initialValues","undefined","Formik","enableReinitialize","Form","FormikInputFieldComponent","fieldName","FormikSelectFieldComponent","options","ButtonComponent","ProductPage","firstName","useUserStore","dialogRef","addToastr","useToastrStore","searchKeyword","setSearchKeyword","searchProductList","resetProductStore","message","handleCloseDialog","_dialogRef$current","current","close","handleSubmitForm","_Fragment","SectionHeadingComponent","subtitle","SearchInputComponent","handleAddProduct","_dialogRef$current2","showModal","ProductListComponent","ref","DialogHeaderComponent","onClose","AddProductComponent","SectionHeading","Button","isButtonBordered","baseClass","buttonClass","buttonStyles","setButtonStyles","getButtonStyles","DialogHeader","IconCloseComponent","FormikField","restProps","formik","useFormikContext","hasError","setHasError","errors","camelCaseToTitleCase","Field","ErrorMessage","component","FormikSelectField","as","_ref2","dispatch","AppStore","useAppDispatch","useAppSelector","ProductStore","select","getProductList","getProductCategories","dispatchResetProductStore","actions","reset","dispatchSetProductCategories","user","UserStore","fullName","firstname","setUser","dispatchSetUser","fetchUser","resetUserStore","dispatchResetUserStore"],"sourceRoot":""}