{"version":3,"file":"static/js/196.40cc68a9.chunk.js","mappings":"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","sources":["helpers/camel-case-to-title-case.helper.ts","user/components/UserUpdateForm.component.tsx","pages/Profile.page.tsx","shared-components/SectionHeading.component.tsx","shared-components/dialog/DialogHeader.component.tsx","shared-components/inputs/FormikInputField.component.tsx","shared-components/inputs/FormikSelectField.component.tsx","store/hooks/use-user-store.hook.ts"],"sourcesContent":["const camelCaseToTitleCase = (str: string) =>\r\n  str\r\n    .replace(/([A-Z])/g, \" $1\")\r\n    .replace(/^./, (str) => str.toUpperCase())\r\n    .trim();\r\n\r\nexport default camelCaseToTitleCase;\r\n","import React from \"react\";\r\nimport useUserStore from \"../../store/hooks/use-user-store.hook\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikFieldComponent from \"../../shared-components/inputs/FormikInputField.component\";\r\nimport FormikSelectFieldComponent from \"../../shared-components/inputs/FormikSelectField.component\";\r\nimport * as yup from \"yup\";\r\nimport ButtonComponent from \"../../shared-components/buttons/Button.component\";\r\nimport UserFormFieldNames from \"../models/user-form-field-names.type\";\r\nimport UserFormFields from \"../models/user-form-fields.type\";\r\n\r\nconst UserUpdateForm = ({\r\n  updateField,\r\n  onSubmit,\r\n}: {\r\n  updateField: UserFormFieldNames;\r\n  onSubmit: (values: UserFormFields) => void;\r\n}) => {\r\n  const { user } = useUserStore();\r\n\r\n  const validationSchema = yup.object({\r\n    username: yup.string().required(\"Username is required\"),\r\n    firstName: yup.string().required(\"First name is required\"),\r\n    lastName: yup.string().required(\"Last name is required\"),\r\n    gender: yup.string().required(\"Gender is required\"),\r\n    email: yup.string().email(\"Email is not valid\").required(\"Email is required\"),\r\n  });\r\n\r\n  const initialValues: UserFormFields = {\r\n    username: user?.username || \"\",\r\n    firstName: user?.firstName || \"\",\r\n    lastName: user?.lastName || \"\",\r\n    gender: user?.gender || \"\",\r\n    email: user?.email || \"\",\r\n  };\r\n\r\n  return (\r\n    <div aria-roledescription=\"user update\" className=\"p-10\">\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={onSubmit} enableReinitialize>\r\n        <Form className=\"flex flex-col gap-5\">\r\n          {renderField(updateField, \"username\")}\r\n          {renderField(updateField, \"firstName\")}\r\n          {renderField(updateField, \"lastName\")}\r\n          {renderField(updateField, \"gender\")}\r\n          {renderField(updateField, \"email\")}\r\n          <ButtonComponent text=\"Update\" type=\"submit\" />\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderField = (updateField: UserFormFieldNames, fieldName: UserFormFieldNames) => {\r\n  if (updateField !== fieldName) return null;\r\n\r\n  if (fieldName === \"gender\") {\r\n    return (\r\n      <FormikSelectFieldComponent\r\n        fieldName={fieldName}\r\n        required\r\n        options={[\r\n          { value: \"male\", label: \"Male\" },\r\n          { value: \"female\", label: \"Female\" },\r\n        ]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <FormikFieldComponent fieldName={fieldName} required />;\r\n};\r\n\r\nexport default React.memo(UserUpdateForm);\r\n","import React from \"react\";\r\nimport SectionHeadingComponent from \"../shared-components/SectionHeading.component\";\r\nimport useUserStore from \"../store/hooks/use-user-store.hook\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\nimport UserUpdateFormComponent from \"../user/components/UserUpdateForm.component\";\r\nimport UserFormFieldNames from \"../user/models/user-form-field-names.type\";\r\nimport UserFormFields from \"../user/models/user-form-fields.type\";\r\nimport useToastrStore from \"../store/hooks/use-toastr-store.hook\";\r\nimport DialogHeaderComponent from \"../shared-components/dialog/DialogHeader.component\";\r\n\r\nconst ProfilePage = () => {\r\n  const { addToastr } = useToastrStore();\r\n  const [updateField, setUpdateField] = React.useState<UserFormFieldNames>();\r\n  const dialogRef = React.useRef<HTMLDialogElement>(null);\r\n  const { user, firstName } = useUserStore();\r\n\r\n  const handleCloseDialog = () => {\r\n    setUpdateField(undefined);\r\n    dialogRef.current?.close();\r\n  };\r\n\r\n  const handleOpenDailog = (updateField: UserFormFieldNames) => {\r\n    setUpdateField(updateField);\r\n    dialogRef.current?.showModal();\r\n  };\r\n\r\n  const handleOnSubmit = (values: UserFormFields) => {\r\n    console.log(values);\r\n    addToastr({\r\n      variant: \"success\",\r\n      message: `${firstName}, you updated your profile.`,\r\n    });\r\n    handleCloseDialog();\r\n  };\r\n  return (\r\n    <div aria-roledescription=\"profile\" className=\"h-full\">\r\n      <SectionHeadingComponent title=\"Home\" subtitle=\"View and edit your profile\" />\r\n      <div className=\"p-10 flex items-start gap-10 h-[calc(100%-64px)] overflow-auto\">\r\n        <div className=\"flex items-center gap-5 bg-white p-5 rounded border\">\r\n          <img src={user?.image} alt=\"\" className=\"w-24 h-24 rounded-full p-0.5 ring-4 ring-gray-300\" />\r\n          <div className=\"flex flex-col gap-2\">\r\n            <ButtonComponent text=\"Change Avatar\" />\r\n            <p>JPG, GIF or PNG. 1MB max.</p>\r\n          </div>\r\n        </div>\r\n        <ul className=\"divide-y flex-1 bg-white p-5 rounded border\">\r\n          <li className=\"flex items-center py-5\">\r\n            <span className=\"min-w-96 font-medium text-gray-500\">Firstname:</span>\r\n            <span className=\"flex-1 text-gray-900\">{user?.firstName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"firstName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-5\">\r\n            <span className=\"min-w-96 font-medium text-gray-500\">Lastname:</span>\r\n            <span className=\"flex-1 text-gray-900\">{user?.lastName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"lastName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-5\">\r\n            <span className=\"min-w-96 font-medium text-gray-500\">Email:</span>\r\n            <span className=\"flex-1 text-gray-900\">{user?.email}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"email\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-5\">\r\n            <span className=\"min-w-96 font-medium text-gray-500\">Username:</span>\r\n            <span className=\"flex-1 text-gray-900\">{user?.username}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"username\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-5\">\r\n            <span className=\"min-w-96 font-medium text-gray-500\">Gender:</span>\r\n            <span className=\"flex-1 text-gray-900\">{user?.gender}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"gender\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-start py-5\">\r\n            <div className=\"w-96 pr-5\">\r\n              <h3 className=\"text-base font-medium\">Suspend Account</h3>\r\n              <p className=\"text-gray-500 italic\">You can temporarily suspend your account here.</p>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2\">\r\n              <ButtonComponent text=\"Suspend my account\" variant=\"warning\" />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-start py-5\">\r\n            <div className=\" py-5 flex items-start\">\r\n              <div className=\"w-96 pr-5\">\r\n                <h3 className=\"text-base font-medium\">Delete Account</h3>\r\n                <p className=\"text-gray-500 italic\">\r\n                  No longer want to use our service? You can delete your account here. This action is not reversible.\r\n                  All information related to this account will be deleted permanently.\r\n                </p>\r\n              </div>\r\n              <div className=\"flex flex-col gap-2\">\r\n                <ButtonComponent text=\"Delete my account\" variant=\"danger\" />\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <dialog ref={dialogRef} className=\"rounded w-96 shadow-2xl ring-1 ring-gray-300\">\r\n        <DialogHeaderComponent title=\"Update Profile\" onClose={handleCloseDialog} />\r\n        <UserUpdateFormComponent updateField={updateField} onSubmit={handleOnSubmit} />\r\n      </dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProfilePage);\r\n","import React from \"react\";\r\n\r\nconst SectionHeading = ({ title, subtitle }: { title: string; subtitle?: string }) => {\r\n  return (\r\n    <div className=\"p-2 shadow-md bg-white\" aria-roledescription=\"section-heading\">\r\n      <h1 className=\"text-lg font-medium\">{title}</h1>\r\n      {subtitle && <h2 className=\"text-gray-600 italic\">{subtitle}</h2>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SectionHeading);\r\n","import React from \"react\";\r\nimport ButtonIconComponent from \"../buttons/ButtonIcon.component\";\r\nimport IconCloseComponent from \"../icons/IconClose.component\";\r\n\r\ntype DialogHeaderProps = {\r\n  onClose: () => void;\r\n  title: string;\r\n};\r\n\r\nconst DialogHeader = ({ onClose, title }: DialogHeaderProps) => {\r\n  return (\r\n    <header className=\"flex items-center justify-between p-5 border-b\">\r\n      <span className=\"font-medium text-base text-gray-500\">{title}</span>\r\n      <ButtonIconComponent variant=\"danger\" onClick={onClose}>\r\n        <IconCloseComponent className=\"w-3 h-3\" />\r\n      </ButtonIconComponent>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default React.memo(DialogHeader);\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\nimport { InputTypes } from \"./BaseInput.component\";\r\n\r\ntype FormikFieldProps = {\r\n  fieldName: any | string;\r\n  type?: InputTypes;\r\n} & React.InputHTMLAttributes<HTMLInputElement>;\r\n\r\nconst FormikField = ({ fieldName, type = \"text\", ...restProps }: FormikFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      <label htmlFor={fieldName} className=\"text-gray-700\">\r\n        {camelCaseToTitleCase(fieldName)} {restProps.required ? <span className=\"text-red-500\">*</span> : null}{\" \"}\r\n      </label>\r\n      <Field\r\n        type={type}\r\n        id={fieldName}\r\n        name={fieldName}\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        {...restProps}\r\n      />\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikField);\r\n","import { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport React from \"react\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\n\r\ntype FormikSelectFieldProps = {\r\n  fieldName: any | string;\r\n  options: { value: string; label: string }[];\r\n} & React.SelectHTMLAttributes<HTMLSelectElement>;\r\n\r\nconst FormikSelectField = ({ fieldName, options, ...restProps }: FormikSelectFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-3\">\r\n      <label htmlFor={fieldName} className=\"text-gray-700\">\r\n        {camelCaseToTitleCase(fieldName)}\r\n        {restProps.required ? <span className=\"text-red-500\">*</span> : null}{\" \"}\r\n      </label>\r\n      <Field\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        as=\"select\"\r\n        name={fieldName}\r\n        id={fieldName}\r\n        {...restProps}\r\n      >\r\n        <option value=\"\">Select an option</option>\r\n        {options.map(({ value, label }) => (\r\n          <option key={value} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </Field>\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikSelectField);\r\n","import AppStore from \"..\";\r\nimport UserStore from \"../slices/user-store.slice\";\r\n\r\nconst useUserStore = () => {\r\n  const dispatch = AppStore.useAppDispatch();\r\n  const selectUser = AppStore.useAppSelector(UserStore.select.user);\r\n  const selectFullName = AppStore.useAppSelector(UserStore.select.fullName);\r\n  const selectFirstName = AppStore.useAppSelector(UserStore.select.firstname);\r\n\r\n  const dispatchSetUser = () => {\r\n    dispatch(UserStore.fetchUser());\r\n  };\r\n\r\n  const dispatchResetUserStore = () => {\r\n    dispatch(UserStore.actions.reset());\r\n  };\r\n\r\n  return {\r\n    user: selectUser,\r\n    fullName: selectFullName,\r\n    firstName: selectFirstName,\r\n    setUser: dispatchSetUser,\r\n    resetUserStore: dispatchResetUserStore,\r\n  };\r\n};\r\n\r\nexport default useUserStore;\r\n"],"names":["str","replace","toUpperCase","trim","UserUpdateForm","_ref","updateField","onSubmit","user","useUserStore","validationSchema","yup","username","required","firstName","lastName","gender","email","initialValues","_jsx","className","children","Formik","enableReinitialize","_jsxs","Form","renderField","ButtonComponent","text","type","fieldName","FormikSelectFieldComponent","options","value","label","FormikFieldComponent","React","ProfilePage","addToastr","useToastrStore","setUpdateField","dialogRef","handleCloseDialog","_dialogRef$current","undefined","current","close","handleOpenDailog","_dialogRef$current2","showModal","SectionHeadingComponent","title","subtitle","src","image","alt","isButtonBordered","onClick","variant","ref","DialogHeaderComponent","onClose","UserUpdateFormComponent","values","console","log","message","concat","SectionHeading","DialogHeader","ButtonIconComponent","IconCloseComponent","FormikField","restProps","formik","useFormikContext","hasError","setHasError","errors","htmlFor","camelCaseToTitleCase","Field","id","name","ErrorMessage","component","FormikSelectField","as","map","_ref2","dispatch","AppStore","useAppDispatch","useAppSelector","UserStore","select","fullName","firstname","setUser","dispatchSetUser","fetchUser","resetUserStore","dispatchResetUserStore","actions","reset"],"sourceRoot":""}