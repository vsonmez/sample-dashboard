{"version":3,"file":"static/js/318.001620b0.chunk.js","mappings":"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","sources":["helpers/get-button-styles.helper.ts","shared-components/icons/IconClose.component.tsx","helpers/camel-case-to-title-case.helper.ts","shared-components/inputs/FormikField.component.tsx","user/components/UserUpdateForm.component.tsx","pages/Profile.page.tsx","shared-components/SectionHeading.component.tsx","shared-components/buttons/Button.component.tsx","shared-components/buttons/ButtonIcon.component.tsx","store/hooks/use-user-store.hook.ts"],"sourcesContent":["const getButtonStyles = (\r\n  variant: \"primary\" | \"success\" | \"warning\" | \"danger\",\r\n  baseClass: string,\r\n  isButtonIcon?: boolean,\r\n  isButtonBordered?: boolean\r\n) => {\r\n  const buttonBorderedStyleMap = {\r\n    primary: \"border-indigo-500 hover:border-indigo-700 text-indigo-500 hover:text-indigo-700\",\r\n    success: \"border-green-600 hover:border-green-700 text-green-600 hover:text-green-700\",\r\n    warning: \"border-orange-500 hover:border-orange-700 text-orange-500 hover:text-orange-700\",\r\n    danger: \"border-red-500 hover:border-red-700 text-red-500 hover:text-red-700\",\r\n  };\r\n  const buttonStyleMap = {\r\n    primary: \"bg-indigo-500 hover:bg-indigo-700\",\r\n    success: \"bg-green-600 hover:bg-green-700\",\r\n    warning: \"bg-orange-500 hover:bg-orange-700\",\r\n    danger: \"bg-red-500 hover:bg-red-700\",\r\n  };\r\n  const buttonIconStyleMap = {\r\n    primary: \"ring-indigo-500 hover:ring-indigo-700 text-indigo-500 hover:text-indigo-700 hover:ring-2\",\r\n    success: \"ring-green-600 hover:ring-green-700 text-green-600 hover:text-green-700 hover:ring-2\",\r\n    warning: \"ring-orange-500 hover:ring-orange-700 text-orange-500 hover:text-orange-700 hover:ring-2\",\r\n    danger: \"ring-red-500 hover:ring-red-700 text-red-500 hover:text-red-700 hover:ring-2\",\r\n  };\r\n  if (isButtonBordered) {\r\n    return `${buttonBorderedStyleMap[variant] || buttonBorderedStyleMap.primary} ${baseClass}`;\r\n  }\r\n  if (isButtonIcon) {\r\n    return `${buttonIconStyleMap[variant] || buttonIconStyleMap.primary} ${baseClass}`;\r\n  }\r\n  return `${buttonStyleMap[variant] || buttonStyleMap.primary} ${baseClass}`;\r\n};\r\n\r\nexport default getButtonStyles;\r\n","import React from \"react\";\r\n\r\nconst IconClose = (props: React.SVGProps<SVGSVGElement>) => {\r\n  return (\r\n    <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" height=\"1em\" width=\"1em\" {...props}>\r\n      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\" />\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default React.memo(IconClose);\r\n","const camelCaseToTitleCase = (str: string) =>\r\n  str\r\n    .replace(/([A-Z])/g, \" $1\")\r\n    .replace(/^./, (str) => str.toUpperCase())\r\n    .trim();\r\n\r\nexport default camelCaseToTitleCase;\r\n","import React from \"react\";\r\nimport UserFormFields from \"../../user/models/user-form-fields.type\";\r\nimport { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\n\r\nconst FormikField = ({ field, ...restProps }: { field: UserFormFields } & React.HTMLAttributes<HTMLDivElement>) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[field]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[field]);\r\n  }, [formik, field]);\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <label htmlFor={field}>{camelCaseToTitleCase(field)}</label>\r\n      <Field\r\n        type=\"text\"\r\n        id={field}\r\n        name={field}\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        {...restProps}\r\n      />\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={field} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikField);\r\n","import React from \"react\";\r\nimport useUserStore from \"../../store/hooks/use-user-store.hook\";\r\nimport { Formik, Form } from \"formik\";\r\nimport UserFormFields from \"../models/user-form-fields.type\";\r\nimport FormikFieldComponent from \"../../shared-components/inputs/FormikField.component\";\r\nimport * as yup from \"yup\";\r\n\r\nconst UserUpdateForm = ({ updateField }: { updateField: UserFormFields }) => {\r\n  const { user } = useUserStore();\r\n\r\n  const validationSchema = yup.object({\r\n    username: yup.string().required(\"Username is required\"),\r\n    firstName: yup.string().required(\"First name is required\"),\r\n    lastName: yup.string().required(\"Last name is required\"),\r\n    gender: yup.string().required(\"Gender is required\"),\r\n    email: yup.string().email(\"Email is not valid\").required(\"Email is required\"),\r\n  });\r\n  const initialValues = {\r\n    username: user?.username || \"\",\r\n    firstName: user?.firstName || \"\",\r\n    lastName: user?.lastName || \"\",\r\n    gender: user?.gender || \"\",\r\n    email: user?.email || \"\",\r\n  };\r\n\r\n  return (\r\n    <div aria-roledescription=\"user update\">\r\n      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={() => {}} enableReinitialize>\r\n        <Form className=\"flex flex-col gap-5\">\r\n          {renderField(updateField, \"username\")}\r\n          {renderField(updateField, \"firstName\")}\r\n          {renderField(updateField, \"lastName\")}\r\n          {renderField(updateField, \"gender\")}\r\n          {renderField(updateField, \"email\")}\r\n        </Form>\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderField = (updateField: UserFormFields, field: UserFormFields) => {\r\n  if (updateField !== field) return null;\r\n\r\n  return <FormikFieldComponent field={field} />;\r\n};\r\n\r\nexport default React.memo(UserUpdateForm);\r\n","import React from \"react\";\r\nimport SectionHeadingComponent from \"../shared-components/SectionHeading.component\";\r\nimport useUserStore from \"../store/hooks/use-user-store.hook\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\nimport ButtonIconComponent from \"../shared-components/buttons/ButtonIcon.component\";\r\nimport IconCloseComponent from \"../shared-components/icons/IconClose.component\";\r\nimport UserUpdateFormComponent from \"../user/components/UserUpdateForm.component\";\r\nimport UserFormFields from \"../user/models/user-form-fields.type\";\r\n\r\nconst ProfilePage = () => {\r\n  const [updateField, setUpdateField] = React.useState<UserFormFields>();\r\n  const dialogRef = React.useRef<HTMLDialogElement>(null);\r\n  const { user } = useUserStore();\r\n\r\n  const handleOpenDailog = (updateField: UserFormFields) => {\r\n    setUpdateField(updateField);\r\n    dialogRef.current?.showModal();\r\n  };\r\n  return (\r\n    <div aria-roledescription=\"profile\" className=\"h-full\">\r\n      <SectionHeadingComponent title=\"Home\" subtitle=\"View and edit your profile\" />\r\n      <div className=\"px-5 pt-10 flex items-start gap-20 h-[calc(100%-64px)] overflow-auto\">\r\n        <div className=\"flex items-center gap-5\">\r\n          <img src={user?.image} alt=\"\" className=\"w-24 h-24 rounded-full p-0.5 ring-4 ring-gray-300\" />\r\n          <div className=\"flex flex-col gap-2\">\r\n            <ButtonComponent text=\"Change Avatar\" />\r\n            <p>JPG, GIF or PNG. 1MB max.</p>\r\n          </div>\r\n        </div>\r\n        <ul className=\"divide-y-2 flex-1\">\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Firstname:</span>\r\n            <span className=\"flex-1\">{user?.firstName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"firstName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Lastname:</span>\r\n            <span className=\"flex-1\">{user?.lastName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"lastName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Email:</span>\r\n            <span className=\"flex-1\">{user?.email}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"email\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Username:</span>\r\n            <span className=\"flex-1\">{user?.username}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"username\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Gender:</span>\r\n            <span className=\"flex-1\">{user?.gender}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"gender\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\" py-5 flex items-start\">\r\n            <div className=\"w-96 pr-5\">\r\n              <h3 className=\"text-base font-medium\">Suspend Account</h3>\r\n              <p className=\"text-gray-600 italic\">You can temporarily suspend your account here.</p>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2\">\r\n              <ButtonComponent text=\"Suspend my account\" variant=\"warning\" />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\" py-5 flex items-start\">\r\n              <div className=\"w-96 pr-5\">\r\n                <h3 className=\"text-base font-medium\">Delete Account</h3>\r\n                <p className=\"text-gray-600 italic\">\r\n                  No longer want to use our service? You can delete your account here. This action is not reversible.\r\n                  All information related to this account will be deleted permanently.\r\n                </p>\r\n              </div>\r\n              <div className=\"flex flex-col gap-2\">\r\n                <ButtonComponent text=\"Delete my account\" variant=\"danger\" />\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <dialog ref={dialogRef} className=\"rounded w-96 shadow-2xl ring-1 ring-gray-300\">\r\n        <header className=\"flex items-center justify-between p-2 border-b\">\r\n          <span className=\"font-medium text-base\">Update Profile</span>\r\n          <ButtonIconComponent variant=\"danger\" onClick={() => dialogRef.current?.close()}>\r\n            <IconCloseComponent className=\"w-3 h-3\" />\r\n          </ButtonIconComponent>\r\n        </header>\r\n        <div className=\"p-2\">\r\n          <UserUpdateFormComponent updateField={updateField} />\r\n        </div>\r\n        <footer className=\"flex justify-end p-2 border-t\">\r\n          <ButtonComponent text=\"Update\" onClick={() => dialogRef.current?.close()} />\r\n        </footer>\r\n      </dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProfilePage);\r\n","import React from \"react\";\r\n\r\nconst SectionHeading = ({ title, subtitle }: { title: string; subtitle?: string }) => {\r\n  return (\r\n    <div className=\"p-2 shadow-md\" aria-roledescription=\"section-heading\">\r\n      <h1 className=\"text-lg font-medium\">{title}</h1>\r\n      {subtitle && <h2 className=\"text-gray-600 italic\">{subtitle}</h2>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SectionHeading);\r\n","import React from \"react\";\r\nimport getButtonStyles from \"../../helpers/get-button-styles.helper\";\r\nimport ButtonTypes from \"./models/button-types.type\";\r\nimport ButtonVariants from \"./models/button-variants.type\";\r\n\r\ntype ButtonProps = {\r\n  onClick?: () => void;\r\n  text: string;\r\n  type?: ButtonTypes;\r\n  className?: string;\r\n  variant?: ButtonVariants;\r\n  isButtonBordered?: boolean;\r\n};\r\n\r\nconst Button = ({ className, onClick, text, variant = \"primary\", type = \"button\", isButtonBordered }: ButtonProps) => {\r\n  const baseClass = `${isButtonBordered ? \"\" : \"text-white\"} font-bold py-2 px-4 rounded transition-colors`;\r\n  const buttonClass = React.useRef(`${baseClass} ${className || \"\"}`);\r\n\r\n  const [buttonStyles, setButtonStyles] = React.useState(\r\n    getButtonStyles(variant, buttonClass.current, false, isButtonBordered)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setButtonStyles(getButtonStyles(variant, buttonClass.current, false, isButtonBordered));\r\n  }, [variant, buttonClass, isButtonBordered]);\r\n\r\n  return (\r\n    <button className={buttonStyles} type={type} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import React from \"react\";\r\nimport getButtonStyles from \"../../helpers/get-button-styles.helper\";\r\nimport ButtonTypes from \"./models/button-types.type\";\r\nimport ButtonVariants from \"./models/button-variants.type\";\r\n\r\ntype ButtonIconProps = {\r\n  onClick?: () => void;\r\n  type?: ButtonTypes;\r\n  className?: string;\r\n  variant?: ButtonVariants;\r\n  children: React.ReactNode;\r\n};\r\n\r\nconst ButtonIcon = ({ children, className, onClick, type, variant = \"primary\" }: ButtonIconProps) => {\r\n  const baseClass = \"bg-white font-bold p-1 rounded transition-colors ring-1\";\r\n  const buttonClass = React.useRef(`${baseClass} ${className || \"\"}`);\r\n  const [buttonStyles, setButtonStyles] = React.useState(getButtonStyles(variant, buttonClass.current, true));\r\n\r\n  React.useEffect(() => {\r\n    setButtonStyles(getButtonStyles(variant, buttonClass.current, true));\r\n  }, [variant, buttonClass]);\r\n\r\n  return (\r\n    <button className={buttonStyles} type={type} onClick={onClick}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(ButtonIcon);\r\n","import AppStore from \"..\";\r\nimport UserStore from \"../slices/user-store.slice\";\r\n\r\nconst useUserStore = () => {\r\n  const dispatch = AppStore.useAppDispatch();\r\n  const selectUser = AppStore.useAppSelector(UserStore.select.user);\r\n\r\n  const dispatchSetUser = () => {\r\n    dispatch(UserStore.fetchUser());\r\n  };\r\n\r\n  const dispatchResetUserStore = () => {\r\n    dispatch(UserStore.actions.reset());\r\n  };\r\n\r\n  return {\r\n    user: selectUser,\r\n    setUser: dispatchSetUser,\r\n    resetUserStore: dispatchResetUserStore,\r\n  };\r\n};\r\n\r\nexport default useUserStore;\r\n"],"names":["getButtonStyles","variant","baseClass","isButtonIcon","isButtonBordered","buttonBorderedStyleMap","primary","success","warning","danger","buttonStyleMap","buttonIconStyleMap","concat","IconClose","props","_jsx","viewBox","fill","height","width","children","d","React","str","replace","toUpperCase","trim","FormikField","_ref","field","restProps","formik","useFormikContext","hasError","setHasError","errors","_jsxs","className","htmlFor","camelCaseToTitleCase","Field","type","id","name","ErrorMessage","component","UserUpdateForm","updateField","user","useUserStore","validationSchema","yup","username","required","firstName","lastName","gender","email","initialValues","Formik","onSubmit","enableReinitialize","Form","renderField","FormikFieldComponent","ProfilePage","setUpdateField","dialogRef","handleOpenDailog","_dialogRef$current","current","showModal","SectionHeadingComponent","title","subtitle","src","image","alt","ButtonComponent","text","onClick","ref","ButtonIconComponent","_dialogRef$current2","close","IconCloseComponent","UserUpdateFormComponent","_dialogRef$current3","SectionHeading","Button","buttonClass","buttonStyles","setButtonStyles","ButtonIcon","dispatch","AppStore","useAppDispatch","useAppSelector","UserStore","select","setUser","dispatchSetUser","fetchUser","resetUserStore","dispatchResetUserStore","actions","reset"],"sourceRoot":""}