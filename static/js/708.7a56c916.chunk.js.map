{"version":3,"file":"static/js/708.7a56c916.chunk.js","mappings":"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","sources":["helpers/camel-case-to-title-case.helper.ts","shared-components/inputs/FormikInputField.component.tsx","shared-components/inputs/FormikSelectField.component.tsx","user/components/UserUpdateForm.component.tsx","pages/Profile.page.tsx","shared-components/SectionHeading.component.tsx","shared-components/buttons/Button.component.tsx","store/hooks/use-user-store.hook.ts"],"sourcesContent":["const camelCaseToTitleCase = (str: string) =>\r\n  str\r\n    .replace(/([A-Z])/g, \" $1\")\r\n    .replace(/^./, (str) => str.toUpperCase())\r\n    .trim();\r\n\r\nexport default camelCaseToTitleCase;\r\n","import React from \"react\";\r\nimport { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\nimport { InputTypes } from \"./BaseInput.component\";\r\n\r\ntype FormikFieldProps = {\r\n  fieldName: any | string;\r\n  type?: InputTypes;\r\n} & React.HTMLAttributes<HTMLDivElement>;\r\n\r\nconst FormikField = ({ fieldName, type = \"text\", ...restProps }: FormikFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <label htmlFor={fieldName}>{camelCaseToTitleCase(fieldName)}</label>\r\n      <Field\r\n        type={type}\r\n        id={fieldName}\r\n        name={fieldName}\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        {...restProps}\r\n      />\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikField);\r\n","import { ErrorMessage, Field, useFormikContext } from \"formik\";\r\nimport React from \"react\";\r\nimport camelCaseToTitleCase from \"../../helpers/camel-case-to-title-case.helper\";\r\n\r\ntype FormikSelectFieldProps = {\r\n  fieldName: any | string;\r\n  options: { value: string; label: string }[];\r\n} & React.SelectHTMLAttributes<HTMLSelectElement>;\r\n\r\nconst FormikSelectField = ({ fieldName, options, ...restProps }: FormikSelectFieldProps) => {\r\n  const formik = useFormikContext<{ [field: string]: string }>();\r\n  const [hasError, setHasError] = React.useState(formik.errors[fieldName]);\r\n\r\n  React.useEffect(() => {\r\n    setHasError(formik.errors[fieldName]);\r\n  }, [formik, fieldName]);\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <label htmlFor={fieldName}>{camelCaseToTitleCase(fieldName)}</label>\r\n      <Field\r\n        className={`formik-field ${hasError ? \"ring-red-500\" : \"ring-gray-300\"}`}\r\n        as=\"select\"\r\n        name={fieldName}\r\n        id={fieldName}\r\n        {...restProps}\r\n      >\r\n        {options.map(({ value, label }) => (\r\n          <option key={value} value={value}>\r\n            {label}\r\n          </option>\r\n        ))}\r\n      </Field>\r\n      <ErrorMessage component=\"span\" className=\"text-red-500 text-xs\" name={fieldName} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(FormikSelectField);\r\n","import React from \"react\";\r\nimport useUserStore from \"../../store/hooks/use-user-store.hook\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikFieldComponent from \"../../shared-components/inputs/FormikInputField.component\";\r\nimport FormikSelectFieldComponent from \"../../shared-components/inputs/FormikSelectField.component\";\r\nimport * as yup from \"yup\";\r\nimport ButtonComponent from \"../../shared-components/buttons/Button.component\";\r\nimport UserFormFieldNames from \"../models/user-form-field-names.type\";\r\nimport UserFormFields from \"../models/user-form-fields.type\";\r\n\r\nconst UserUpdateForm = ({\r\n  updateField,\r\n  onSubmit,\r\n}: {\r\n  updateField: UserFormFieldNames;\r\n  onSubmit: (values: UserFormFields) => void;\r\n}) => {\r\n  const { user } = useUserStore();\r\n\r\n  const validationSchema = yup.object({\r\n    username: yup.string().required(\"Username is required\"),\r\n    firstName: yup.string().required(\"First name is required\"),\r\n    lastName: yup.string().required(\"Last name is required\"),\r\n    gender: yup.string().required(\"Gender is required\"),\r\n    email: yup.string().email(\"Email is not valid\").required(\"Email is required\"),\r\n  });\r\n\r\n  const initialValues: UserFormFields = {\r\n    username: user?.username || \"\",\r\n    firstName: user?.firstName || \"\",\r\n    lastName: user?.lastName || \"\",\r\n    gender: user?.gender || \"\",\r\n    email: user?.email || \"\",\r\n  };\r\n\r\n  return (\r\n    <div aria-roledescription=\"user update\">\r\n      <div className=\"p-5\">\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          onSubmit={onSubmit}\r\n          enableReinitialize\r\n        >\r\n          <Form className=\"flex flex-col gap-5\">\r\n            {renderField(updateField, \"username\")}\r\n            {renderField(updateField, \"firstName\")}\r\n            {renderField(updateField, \"lastName\")}\r\n            {renderField(updateField, \"gender\")}\r\n            {renderField(updateField, \"email\")}\r\n            <ButtonComponent text=\"Update\" type=\"submit\" />\r\n          </Form>\r\n        </Formik>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst renderField = (updateField: UserFormFieldNames, fieldName: UserFormFieldNames) => {\r\n  if (updateField !== fieldName) return null;\r\n\r\n  if (fieldName === \"gender\") {\r\n    return (\r\n      <FormikSelectFieldComponent\r\n        fieldName={fieldName}\r\n        options={[\r\n          { value: \"male\", label: \"Male\" },\r\n          { value: \"female\", label: \"Female\" },\r\n        ]}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <FormikFieldComponent fieldName={fieldName} />;\r\n};\r\n\r\nexport default React.memo(UserUpdateForm);\r\n","import React from \"react\";\r\nimport SectionHeadingComponent from \"../shared-components/SectionHeading.component\";\r\nimport useUserStore from \"../store/hooks/use-user-store.hook\";\r\nimport ButtonComponent from \"../shared-components/buttons/Button.component\";\r\nimport ButtonIconComponent from \"../shared-components/buttons/ButtonIcon.component\";\r\nimport IconCloseComponent from \"../shared-components/icons/IconClose.component\";\r\nimport UserUpdateFormComponent from \"../user/components/UserUpdateForm.component\";\r\nimport UserFormFieldNames from \"../user/models/user-form-field-names.type\";\r\nimport UserFormFields from \"../user/models/user-form-fields.type\";\r\nimport useToastrStore from \"../store/hooks/use-toastr-store.hook\";\r\n\r\nconst ProfilePage = () => {\r\n  const { addToastr } = useToastrStore();\r\n  const [updateField, setUpdateField] = React.useState<UserFormFieldNames>();\r\n  const dialogRef = React.useRef<HTMLDialogElement>(null);\r\n  const { user } = useUserStore();\r\n\r\n  const handleOpenDailog = (updateField: UserFormFieldNames) => {\r\n    setUpdateField(updateField);\r\n    dialogRef.current?.showModal();\r\n  };\r\n\r\n  const handleOnSubmit = (values: UserFormFields) => {\r\n    console.log(values);\r\n    addToastr({\r\n      variant: \"success\",\r\n      message: \"Profile updated successfully\",\r\n    });\r\n    dialogRef.current?.close();\r\n  };\r\n  return (\r\n    <div aria-roledescription=\"profile\" className=\"h-full\">\r\n      <SectionHeadingComponent title=\"Home\" subtitle=\"View and edit your profile\" />\r\n      <div className=\"px-5 pt-10 flex items-start gap-20 h-[calc(100%-64px)] overflow-auto\">\r\n        <div className=\"flex items-center gap-5\">\r\n          <img src={user?.image} alt=\"\" className=\"w-24 h-24 rounded-full p-0.5 ring-4 ring-gray-300\" />\r\n          <div className=\"flex flex-col gap-2\">\r\n            <ButtonComponent text=\"Change Avatar\" />\r\n            <p>JPG, GIF or PNG. 1MB max.</p>\r\n          </div>\r\n        </div>\r\n        <ul className=\"divide-y-2 flex-1\">\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Firstname:</span>\r\n            <span className=\"flex-1\">{user?.firstName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"firstName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Lastname:</span>\r\n            <span className=\"flex-1\">{user?.lastName}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"lastName\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Email:</span>\r\n            <span className=\"flex-1\">{user?.email}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"email\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Username:</span>\r\n            <span className=\"flex-1\">{user?.username}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"username\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\"flex items-center py-1\">\r\n            <span className=\"min-w-96 font-medium\">Gender:</span>\r\n            <span className=\"flex-1\">{user?.gender}</span>\r\n            <div className=\"flex justify-end\">\r\n              <ButtonComponent text=\"Edit\" isButtonBordered onClick={() => handleOpenDailog(\"gender\")} />\r\n            </div>\r\n          </li>\r\n          <li className=\" py-5 flex items-start\">\r\n            <div className=\"w-96 pr-5\">\r\n              <h3 className=\"text-base font-medium\">Suspend Account</h3>\r\n              <p className=\"text-gray-600 italic\">You can temporarily suspend your account here.</p>\r\n            </div>\r\n            <div className=\"flex flex-col gap-2\">\r\n              <ButtonComponent text=\"Suspend my account\" variant=\"warning\" />\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div className=\" py-5 flex items-start\">\r\n              <div className=\"w-96 pr-5\">\r\n                <h3 className=\"text-base font-medium\">Delete Account</h3>\r\n                <p className=\"text-gray-600 italic\">\r\n                  No longer want to use our service? You can delete your account here. This action is not reversible.\r\n                  All information related to this account will be deleted permanently.\r\n                </p>\r\n              </div>\r\n              <div className=\"flex flex-col gap-2\">\r\n                <ButtonComponent text=\"Delete my account\" variant=\"danger\" />\r\n              </div>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <dialog ref={dialogRef} className=\"rounded w-96 shadow-2xl ring-1 ring-gray-300\">\r\n        <header className=\"flex items-center justify-between p-3 border-b\">\r\n          <span className=\"font-medium text-base\">Update Profile</span>\r\n          <ButtonIconComponent variant=\"danger\" onClick={() => dialogRef.current?.close()}>\r\n            <IconCloseComponent className=\"w-3 h-3\" />\r\n          </ButtonIconComponent>\r\n        </header>\r\n        <UserUpdateFormComponent updateField={updateField} onSubmit={handleOnSubmit} />\r\n      </dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ProfilePage);\r\n","import React from \"react\";\r\n\r\nconst SectionHeading = ({ title, subtitle }: { title: string; subtitle?: string }) => {\r\n  return (\r\n    <div className=\"p-2 shadow-md\" aria-roledescription=\"section-heading\">\r\n      <h1 className=\"text-lg font-medium\">{title}</h1>\r\n      {subtitle && <h2 className=\"text-gray-600 italic\">{subtitle}</h2>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(SectionHeading);\r\n","import React from \"react\";\r\nimport getButtonStyles from \"../../helpers/get-button-styles.helper\";\r\nimport ButtonTypes from \"./models/button-types.type\";\r\nimport ButtonVariants from \"./models/button-variants.type\";\r\n\r\ntype ButtonProps = {\r\n  onClick?: () => void;\r\n  text: string;\r\n  type?: ButtonTypes;\r\n  className?: string;\r\n  variant?: ButtonVariants;\r\n  isButtonBordered?: boolean;\r\n};\r\n\r\nconst Button = ({ className, onClick, text, variant = \"primary\", type = \"button\", isButtonBordered }: ButtonProps) => {\r\n  const baseClass = `${isButtonBordered ? \"\" : \"text-white\"} font-bold py-2 px-4 rounded transition-colors`;\r\n  const buttonClass = React.useRef(`${baseClass} ${className || \"\"}`);\r\n\r\n  const [buttonStyles, setButtonStyles] = React.useState(\r\n    getButtonStyles(variant, buttonClass.current, false, isButtonBordered)\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    setButtonStyles(getButtonStyles(variant, buttonClass.current, false, isButtonBordered));\r\n  }, [variant, buttonClass, isButtonBordered]);\r\n\r\n  return (\r\n    <button className={buttonStyles} type={type} onClick={onClick}>\r\n      {text}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default React.memo(Button);\r\n","import AppStore from \"..\";\r\nimport UserStore from \"../slices/user-store.slice\";\r\n\r\nconst useUserStore = () => {\r\n  const dispatch = AppStore.useAppDispatch();\r\n  const selectUser = AppStore.useAppSelector(UserStore.select.user);\r\n\r\n  const dispatchSetUser = () => {\r\n    dispatch(UserStore.fetchUser());\r\n  };\r\n\r\n  const dispatchResetUserStore = () => {\r\n    dispatch(UserStore.actions.reset());\r\n  };\r\n\r\n  return {\r\n    user: selectUser,\r\n    setUser: dispatchSetUser,\r\n    resetUserStore: dispatchResetUserStore,\r\n  };\r\n};\r\n\r\nexport default useUserStore;\r\n"],"names":["str","replace","toUpperCase","trim","FormikField","_ref","fieldName","type","restProps","formik","useFormikContext","hasError","setHasError","React","errors","_jsxs","className","children","_jsx","htmlFor","camelCaseToTitleCase","Field","id","name","concat","ErrorMessage","component","FormikSelectField","options","as","map","_ref2","value","label","UserUpdateForm","updateField","onSubmit","user","useUserStore","validationSchema","yup","username","required","firstName","lastName","gender","email","initialValues","Formik","enableReinitialize","Form","renderField","ButtonComponent","text","FormikSelectFieldComponent","FormikFieldComponent","ProfilePage","addToastr","useToastrStore","setUpdateField","dialogRef","handleOpenDailog","_dialogRef$current","current","showModal","SectionHeadingComponent","title","subtitle","src","image","alt","isButtonBordered","onClick","variant","ref","ButtonIconComponent","_dialogRef$current3","close","IconCloseComponent","UserUpdateFormComponent","values","_dialogRef$current2","console","log","message","SectionHeading","Button","baseClass","buttonClass","buttonStyles","setButtonStyles","getButtonStyles","dispatch","AppStore","useAppDispatch","useAppSelector","UserStore","select","setUser","dispatchSetUser","fetchUser","resetUserStore","dispatchResetUserStore","actions","reset"],"sourceRoot":""}